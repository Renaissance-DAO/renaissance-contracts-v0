{
  "address": "0xD5724171C2b7f0AA717a324626050BD05767e2C6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughUpdates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairInfoAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairInfoDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimumPairInfoUpdate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumPairInfoUpdate",
          "type": "uint256"
        }
      ],
      "name": "MinimumPairInfoUpdateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "PeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PriceOracle_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        }
      ],
      "name": "createFNFTPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fnft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getFNFTPriceETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price0CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price1CumulativeLast",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct FixedPoint.uq112x112",
              "name": "price0Average",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct FixedPoint.uq112x112",
              "name": "price1Average",
              "type": "tuple"
            },
            {
              "internalType": "uint216",
              "name": "totalUpdates",
              "type": "uint216"
            },
            {
              "internalType": "uint32",
              "name": "blockTimestampLast",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct IPriceOracle.PairInfo",
          "name": "pairInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price0CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price1CumulativeLast",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct FixedPoint.uq112x112",
              "name": "price0Average",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct FixedPoint.uq112x112",
              "name": "price1Average",
              "type": "tuple"
            },
            {
              "internalType": "uint216",
              "name": "totalUpdates",
              "type": "uint216"
            },
            {
              "internalType": "uint32",
              "name": "blockTimestampLast",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct IPriceOracle.PairInfo",
          "name": "pairInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumPairInfoUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumPairInfoUpdate",
          "type": "uint256"
        }
      ],
      "name": "setMinimumPairInfoUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fnft",
          "type": "address"
        }
      ],
      "name": "updateFNFTPairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "updatePairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x836833fc7f1c52bfdfad8c34522439e86a5d61bdacff4900c2b716ccbfacca2b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xD5724171C2b7f0AA717a324626050BD05767e2C6",
    "transactionIndex": 0,
    "gasUsed": "1416801",
    "logsBloom": "0x
    "blockHash": "0xed7e800c449f1be50042b0ac79266dfd32dfed1381d0d8f9c8186b68ce2ce69d",
    "transactionHash": "0x836833fc7f1c52bfdfad8c34522439e86a5d61bdacff4900c2b716ccbfacca2b",
    "logs": [],
    "blockNumber": 3693194,
    "cumulativeGasUsed": "1416801",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    "0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB"
  ],
  "numDeployments": 1,
  "solcInputHash": "961fec123a75984f6857e077cf799290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughUpdates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairInfoAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairInfoDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumPairInfoUpdate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumPairInfoUpdate\",\"type\":\"uint256\"}],\"name\":\"MinimumPairInfoUpdateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"PeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PriceOracle_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"createFNFTPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fnft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getFNFTPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"uint216\",\"name\":\"totalUpdates\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracle.PairInfo\",\"name\":\"pairInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"uint216\",\"name\":\"totalUpdates\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracle.PairInfo\",\"name\":\"pairInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPairInfoUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumPairInfoUpdate\",\"type\":\"uint256\"}],\"name\":\"setMinimumPairInfoUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fnft\",\"type\":\"address\"}],\"name\":\"updateFNFTPairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"updatePairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"1. Store cumulative prices for each pair in the pool 2. Update to calculate twap and update for each pair\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"src/contracts/PriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./libraries/PriceOracleLibrary.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\n\\n/**\\n    1. Store cumulative prices for each pair in the pool\\n    2. Update to calculate twap and update for each pair\\n*/\\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\\n    using FixedPoint for *;\\n\\n    IUniswapV2Factory public immutable override factory;\\n    address public immutable override WETH;\\n\\n    // Map of pair address to PairInfo struct, which contains cumulative price, last block timestamps, and etc.\\n    mapping(address => PairInfo) private _getTwap;\\n\\n    uint256 public override minimumPairInfoUpdate;\\n    uint256 public override period;\\n\\n    constructor(address _factory, address _weth) {\\n        factory = IUniswapV2Factory(_factory);\\n        WETH = _weth;\\n    }\\n\\n    function __PriceOracle_init() external override initializer {\\n        __Ownable_init();\\n\\n        period = 10 minutes;\\n        minimumPairInfoUpdate = 10;\\n    }\\n\\n    // Get TWAP price of a token.\\n    function consult(\\n        address _token,\\n        address _pair,\\n        uint256 _amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        PairInfo memory pairInfo = _getTwap[_pair];\\n        if (!pairInfo.exists) revert PairInfoDoesNotExist();\\n\\n        amountOut = _calculatePrice(_token, _amountIn, pairInfo);\\n    }\\n\\n    function createFNFTPair(address _token0) external override returns (address) {\\n        return _createPairAddress(_token0, WETH);\\n    }\\n\\n    // Get FNFT TWAP Price in ETH/WETH.\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function getFNFTPriceETH(address _fnft, uint256 _amountIn) external view override returns (uint256 amountOut) {\\n        address pair = _getPairAddress(_fnft, WETH);\\n        PairInfo memory pairInfo = _getTwap[pair];\\n        if (!pairInfo.exists) revert PairInfoDoesNotExist();\\n        if (pairInfo.totalUpdates < minimumPairInfoUpdate) revert NotEnoughUpdates();\\n\\n        amountOut = _calculatePrice(_fnft, _amountIn, pairInfo);\\n    }\\n\\n    // Get pair address from factory. Returns address(0) if not found.\\n    function getPairAddress(address _token0, address _token1) external view override returns (address) {\\n        return _getPairAddress(_token0, _token1);\\n    }\\n\\n    // Get pair info with uniswap v2 pair address.\\n    function getPairInfo(address _pair) external view override returns (PairInfo memory pairInfo) {\\n        pairInfo = _getTwap[_pair];\\n    }\\n\\n    // Get pair info, which includes cumulative prices, last block timestamp, price average, and etc.\\n    function getPairInfo(address _token0, address _token1) external view override returns (PairInfo memory pairInfo) {\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        pairInfo = _getTwap[pairAddress];\\n    }\\n\\n    // Set minimum pair info info update required to get FNFT-WETH TWAP price.\\n    function setMinimumPairInfoUpdate(uint256 _minimumPairInfoUpdate) external override onlyOwner {\\n        emit MinimumPairInfoUpdateUpdated(minimumPairInfoUpdate, _minimumPairInfoUpdate);\\n        minimumPairInfoUpdate = _minimumPairInfoUpdate;\\n    }\\n\\n    // Set minimum period to wait for the next pair info update.\\n    function setPeriod(uint256 _period) external override onlyOwner {\\n        emit PeriodUpdated(period, _period);\\n        period = _period;\\n    }\\n\\n    // Update FNFT-WETH pair info.\\n    function updateFNFTPairInfo(address _fnft) external override {\\n        _updatePairInfo(_fnft, WETH);\\n    }\\n\\n    // Update pair info.\\n    function updatePairInfo(address _token0, address _token1) external override {\\n        _updatePairInfo(_token0, _token1);\\n    }\\n\\n    // Add pair info to price oracle.\\n    function _addPairInfo(address _token0, address _token1) internal {\\n        // Get predetermined pair address.\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        PairInfo storage pairInfo = _getTwap[pairAddress];\\n        if (pairInfo.exists) revert PairInfoAlreadyExists();\\n\\n        // Get pair information for the given pair address.\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n        // Get last block timestamp from reserves.\\n        (, , uint32 blockTimestampLast) = pair.getReserves();\\n\\n        // Initialize pairInfo for the two tokens.\\n        pairInfo.token0 = pair.token0();\\n        pairInfo.token1 = pair.token1();\\n        pairInfo.price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (token1 / token0)\\n        pairInfo.price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (token0 / token1)\\n        pairInfo.blockTimestampLast = blockTimestampLast;\\n        pairInfo.exists = true;\\n    }\\n\\n    // Calculate token twap price based on pair info and the amount in.\\n    function _calculatePrice(address _token, uint256 _amountIn, PairInfo memory _pairInfo) internal pure returns (uint256 amountOut) {\\n        if (_token == _pairInfo.token0) {\\n            amountOut = _pairInfo.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            if (_token != _pairInfo.token1) revert InvalidToken();\\n            amountOut = _pairInfo.price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    // Create pair address from uniswap pair factory.\\n    function _createPairAddress(address _token0, address _token1) internal returns (address) {\\n        return factory.createPair(_token0, _token1);\\n    }\\n\\n    // Get pair address from uniswap pair factory.\\n    function _getPairAddress(address _token0, address _token1) internal view returns (address) {\\n        return factory.getPair(_token0, _token1);\\n    }\\n\\n    // Update pair info of two token pair.\\n    function _updatePairInfo(address _token0, address _token1) internal {\\n        // Get predetermined pair address.\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        // Update or add pair info if the pair has been created from factory.\\n        if (pairAddress != address(0)){\\n            PairInfo storage pairInfo = _getTwap[pairAddress];\\n            // we want an update to silently skip because it's updated from the token contract itself\\n            if (pairInfo.exists) {\\n                // Get cumulative prices for each token pairs and block timestampe in the pool.\\n                (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = PriceOracleLibrary\\n                    .currentCumulativePrices(pairAddress);\\n                if (price0Cumulative != 0 && price1Cumulative != 0) {\\n                    uint32 timeElapsed = blockTimestamp - pairInfo.blockTimestampLast;\\n                    if (timeElapsed >= period) {\\n                        // Overflow is desired, casting never truncates.\\n                        // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by the time elapsed.\\n                        FixedPoint.uq112x112 memory price0Average = FixedPoint.uq112x112(\\n                            uint224((price0Cumulative - pairInfo.price0CumulativeLast) / timeElapsed)\\n                        );\\n                        FixedPoint.uq112x112 memory price1Average = FixedPoint.uq112x112(\\n                            uint224((price1Cumulative - pairInfo.price1CumulativeLast) / timeElapsed)\\n                        );\\n                        pairInfo.price0Average = price0Average;\\n                        pairInfo.price1Average = price1Average;\\n                        pairInfo.price0CumulativeLast = price0Cumulative;\\n                        pairInfo.price1CumulativeLast = price1Cumulative;\\n                        pairInfo.blockTimestampLast = blockTimestamp;\\n                        ++pairInfo.totalUpdates;\\n                    }\\n                }\\n            } else {\\n                _addPairInfo(_token0, _token1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe517e29e9fd17866dd4bbeb51b7f8716bb0e4684aca8aba7efa445dfd0ac8a01\",\"license\":\"MIT\"},\"src/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/UQ112x112.sol\\\";\\nimport \\\"../libraries/math/FixedPoint.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\n\\ninterface IPriceOracle {\\n    // Struct that contains metadata of two token pair that is stored in the liquidity pool.\\n    // Metadata used to calculated TWAP (Time-weighted average price).\\n    struct PairInfo {\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        FixedPoint.uq112x112 price0Average;\\n        FixedPoint.uq112x112 price1Average;\\n        uint216 totalUpdates;\\n        uint32 blockTimestampLast;\\n        bool exists;\\n    }\\n\\n    function period() external view returns (uint256);\\n\\n    function minimumPairInfoUpdate() external view returns (uint256);\\n\\n    function WETH() external view returns (address);\\n\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    function __PriceOracle_init() external;\\n\\n    function setPeriod(uint256 _period) external;\\n\\n    function setMinimumPairInfoUpdate(uint256 _minimumPairInfoUpdate) external;\\n\\n    function getPairAddress(address _token0, address _token1) external view returns (address);\\n\\n    function getPairInfo(address _token0, address _token1) external view returns (PairInfo memory pairInfo);\\n\\n    function getPairInfo(address _pair) external view returns (PairInfo memory pairInfo);\\n\\n    function updatePairInfo(address _token0, address _token1) external;\\n\\n    function updateFNFTPairInfo(address _fnft) external;\\n\\n    function createFNFTPair(address _token0) external returns (address);\\n\\n    function consult(\\n        address _token,\\n        address _pair,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getFNFTPriceETH(address _fnft, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    event PeriodUpdated(uint256 oldPeriod, uint256 newPeriod);\\n    event MinimumPairInfoUpdateUpdated(uint256 oldMinimumPairInfoUpdate, uint256 newMinimumPairInfoUpdate);\\n\\n    error InvalidToken();\\n    error NotEnoughUpdates();\\n    error PairInfoAlreadyExists();\\n    error PairInfoDoesNotExist();\\n}\\n\",\"keccak256\":\"0x1e4947bb1b352879a5661acf90d2a0229bf89964dd95ba6c57c890c112ffecbe\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n}\\n\",\"keccak256\":\"0xbff8a2e20a5340751c23480b5f703f2a8af70fc2f8c8095862b89258295a9544\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n}\\n\",\"keccak256\":\"0x3b04b809645e0975ca14025904c43dc95655bda03e6685e6d10ee7d6950aa514\",\"license\":\"MIT\"},\"src/contracts/libraries/PriceOracleLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./UQ112x112.sol\\\";\\nimport \\\"./math/FixedPoint.sol\\\";\\nimport \\\"./math/SafeMath.sol\\\";\\n\\nlibrary PriceOracleLibrary {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n        \\n        //if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp && reserve0 != 0 && reserve1 != 0) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(UQ112x112.encode(reserve1).uqdiv(reserve0)) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(UQ112x112.encode(reserve0).uqdiv(reserve1)) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f9bd91adf84ecb961a5b62748280d2ab92c11703f12c0f3972417885d1e4740\",\"license\":\"MIT\"},\"src/contracts/libraries/UQ112x112.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x8cd773695d730f37bebc3f721e638ae18855eb427a577d4de3f9c8f5646489fd\",\"license\":\"MIT\"},\"src/contracts/libraries/math/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1d203de39344d996ef88c66a47936767b7fef60058eb6e2180c91b7f93abe8\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n        r = 255;\\n        if (x & type(uint256).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1164085aeec4c45a594dc008d041b6c4fd496d6364bb303f0e65a79be091a855\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"FixedPoint::muli: overflow:\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= type(uint144).max) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xfbd1eac26ce29e109992b7b32db7b73e4a6f756205faf7fcb29359b4f6b351ea\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity 0.8.13;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (type(uint8).max - d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * (((type(uint8).max - pow2 + 1)) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xf5c057a505932a37882cac8417f65110a39381a4588ded1da4a3686eb1e77883\",\"license\":\"CC-BY-4.0\"},\"src/contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0xc5ebe7fd73c6481719f92f34eae482224b3da68b3d640a2b7b258043b664b2c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200198d3803806200198d833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a0516118a3620000ea600039600081816102090152818161055401528181610638015261066b015260008181610256015281816109500152610d6e01526118a36000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063a0cbb062116100a2578063b4f69a2f11610071578063b4f69a2f1461023e578063c45a015514610251578063d4ff73f714610278578063ef78d4fd1461028b578063f2fde38b1461029457600080fd5b8063a0cbb062146101e8578063abf21e44146101fb578063ad5c464814610204578063b42be42b1461022b57600080fd5b80636f0f4fdf116100e95780636f0f4fdf1461018d578063715018a6146101a05780638cb30149146101a85780638da5cb5b146101b057806394b26a1b146101d557600080fd5b80630f3a9f651461011b578063400f7a1e146101305780634ff615b714610159578063636cfa0c1461016c575b600080fd5b61012e610129366004611415565b6102a7565b005b61014361013e366004611443565b61031b565b604051610150919061147c565b60405180910390f35b61012e610167366004611415565b6103f1565b61017f61017a36600461152e565b61045c565b604051908152602001610150565b61012e61019b36600461156f565b61054e565b61012e61057b565b61012e6105b1565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610150565b6101bd6101e336600461156f565b610630565b61017f6101f636600461158c565b610662565b61017f60665481565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b61012e610239366004611443565b6107a7565b6101bd61024c366004611443565b6107b5565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b61014361028636600461156f565b6107c8565b61017f60675481565b61012e6102a236600461156f565b61088e565b6033546001600160a01b031633146102da5760405162461bcd60e51b81526004016102d1906115b8565b60405180910390fd5b60675460408051918252602082018390527f5b873fc01d45058fe77f3883a91020f46d5a7385baac6ceab19748d1d0ae464a910160405180910390a1606755565b6103236113b4565b600061032f8484610926565b6001600160a01b03908116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff161515610100820152949350505050565b6033546001600160a01b0316331461041b5760405162461bcd60e51b81526004016102d1906115b8565b60665460408051918252602082018390527f05c6144bfed9f2471c3de6f59bd591c7276daeac7b813b7fea4aef03a4473934910160405180910390a1606655565b6001600160a01b038281166000908152606560209081526040808320815161012081018352815486168152600182015490951685840152600281015485830152600381015460608601528151808401835260048201546001600160e01b039081168252608087019190915282519384019092526005810154909116825260a0840191909152600601546001600160d81b03811660c0840152600160d81b810463ffffffff1660e0840152600160f81b900460ff161515610100830181905290919061053a5760405163617dac3760e01b815260040160405180910390fd5b6105458584836109bd565b95945050505050565b610578817f0000000000000000000000000000000000000000000000000000000000000000610a60565b50565b6033546001600160a01b031633146105a55760405162461bcd60e51b81526004016102d1906115b8565b6105af6000610c36565b565b60006105bd6001610c88565b905080156105d5576000805461ff0019166101001790555b6105dd610d15565b610258606755600a6066558015610578576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600061065c827f0000000000000000000000000000000000000000000000000000000000000000610d44565b92915050565b60008061068f847f0000000000000000000000000000000000000000000000000000000000000000610926565b6001600160a01b03818116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff16151561010082018190529192509061076c5760405163617dac3760e01b815260040160405180910390fd5b6066548160c001516001600160d81b0316101561079c57604051632ec65bab60e11b815260040160405180910390fd5b6105458585836109bd565b6107b18282610a60565b5050565b60006107c18383610926565b9392505050565b6107d06113b4565b506001600160a01b03908116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff16151561010082015290565b6033546001600160a01b031633146108b85760405162461bcd60e51b81526004016102d1906115b8565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d1565b61057881610c36565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906115ed565b600081600001516001600160a01b0316846001600160a01b031603610a065760808201516109f6906109ef9085610db9565b5160701c90565b6001600160901b031690506107c1565b81602001516001600160a01b0316846001600160a01b031614610a3c5760405163c1ab6dc160e01b815260040160405180910390fd5b60a0820151610a4f906109ef9085610db9565b6001600160901b0316949350505050565b6000610a6c8383610926565b90506001600160a01b03811615610c31576001600160a01b03811660009081526065602052604090206006810154600160f81b900460ff1615610c25576000806000610ab785610e57565b92509250925082600014158015610acd57508115155b15610c1d576006840154600090610af190600160d81b900463ffffffff1683611620565b90506067548163ffffffff1610610c1b57600060405180602001604052808363ffffffff16886002015488610b269190611645565b610b309190611672565b6001600160e01b03168152509050600060405180602001604052808463ffffffff16896003015488610b629190611645565b610b6c9190611672565b6001600160e01b03908116909152835160048a0180549183166001600160e01b0319928316179055825160058b018054919093169116179055600288018790556003880186905560068801805463ffffffff8716600160d81b0263ffffffff60d81b198216811783559293509091600091610bf4916001600160d81b03908116911617611686565b91906101000a8154816001600160d81b0302191690836001600160d81b0316021790555050505b505b505050610c2f565b610c2f8484611067565b505b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610ccf578160ff166001148015610cab5750303b155b610cc75760405162461bcd60e51b81526004016102d1906116b4565b506000919050565b60005460ff808416911610610cf65760405162461bcd60e51b81526004016102d1906116b4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610d3c5760405162461bcd60e51b81526004016102d190611702565b6105af611340565b6040516364e329cb60e11b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c9c65396906044016020604051808303816000875af1158015610999573d6000803e3d6000fd5b6040805160208101909152600081526000821580610df6575083516001600160e01b031683610de8818361174d565b9250610df49083611672565b145b610e425760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f770000000000000060448201526064016102d1565b60408051602081019091529081529392505050565b6000806000610e64611370565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec8919061176c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c919061176c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f95919061179c565b9250925092508363ffffffff168163ffffffff1614158015610fbf57506001600160701b03831615155b8015610fd357506001600160701b03821615155b1561105d576000610fe48286611620565b90508063ffffffff1661100985610ffa86611386565b6001600160e01b03169061139f565b6001600160e01b031661101c919061174d565b61102690886117ec565b96508063ffffffff1661103c84610ffa87611386565b6001600160e01b031661104f919061174d565b61105990876117ec565b9550505b5050509193909250565b60006110738383610926565b6001600160a01b0381166000908152606560205260409020600681015491925090600160f81b900460ff16156110bc5760405163202c6ac160e11b815260040160405180910390fd5b60008290506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611125919061179c565b92505050816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b91906115ed565b83546001600160a01b0319166001600160a01b039182161784556040805163d21220a760e01b815290519184169163d21220a7916004808201926020929091908290030181865afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120891906115ed565b8360010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611292919061176c565b8360020181905550816001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061176c565b6003840155600690920180546001600160f81b0363ffffffff909416600160d81b02939093166001600160d81b0390931692909217600160f81b1790915550505050565b600054610100900460ff166113675760405162461bcd60e51b81526004016102d190611702565b6105af33610c36565b600061138164010000000042611804565b905090565b600061065c600160701b6001600160701b038416611818565b60006107c16001600160701b03831684611847565b60408051610120810182526000808252602080830182905282840182905260608301829052835180820185528281526080840152835190810190935280835260a082019290925260c0810182905260e0810182905261010081019190915290565b60006020828403121561142757600080fd5b5035919050565b6001600160a01b038116811461057857600080fd5b6000806040838503121561145657600080fd5b82356114618161142e565b915060208301356114718161142e565b809150509250929050565b81516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080808301516101208301916114cd90840182516001600160e01b03169052565b5060a08301516114e960a0840182516001600160e01b03169052565b5060c083015161150460c08401826001600160d81b03169052565b5060e083015161151c60e084018263ffffffff169052565b50610100928301511515919092015290565b60008060006060848603121561154357600080fd5b833561154e8161142e565b9250602084013561155e8161142e565b929592945050506040919091013590565b60006020828403121561158157600080fd5b81356107c18161142e565b6000806040838503121561159f57600080fd5b82356115aa8161142e565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156115ff57600080fd5b81516107c18161142e565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8381169083168181101561163d5761163d61160a565b039392505050565b6000828210156116575761165761160a565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826116815761168161165c565b500490565b60006001600160d81b038281166002600160d81b031981016116aa576116aa61160a565b6001019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008160001904831182151516156117675761176761160a565b500290565b60006020828403121561177e57600080fd5b5051919050565b80516001600160701b0381168114610d1057600080fd5b6000806000606084860312156117b157600080fd5b6117ba84611785565b92506117c860208501611785565b9150604084015163ffffffff811681146117e157600080fd5b809150509250925092565b600082198211156117ff576117ff61160a565b500190565b6000826118135761181361165c565b500690565b60006001600160e01b038281168482168115158284048211161561183e5761183e61160a565b02949350505050565b60006001600160e01b03838116806118615761186161165c565b9216919091049291505056fea2646970667358221220222b01e634989746ab9f9edcf26948184c69162ea27ca2382bad9c5a81f35db764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063a0cbb062116100a2578063b4f69a2f11610071578063b4f69a2f1461023e578063c45a015514610251578063d4ff73f714610278578063ef78d4fd1461028b578063f2fde38b1461029457600080fd5b8063a0cbb062146101e8578063abf21e44146101fb578063ad5c464814610204578063b42be42b1461022b57600080fd5b80636f0f4fdf116100e95780636f0f4fdf1461018d578063715018a6146101a05780638cb30149146101a85780638da5cb5b146101b057806394b26a1b146101d557600080fd5b80630f3a9f651461011b578063400f7a1e146101305780634ff615b714610159578063636cfa0c1461016c575b600080fd5b61012e610129366004611415565b6102a7565b005b61014361013e366004611443565b61031b565b604051610150919061147c565b60405180910390f35b61012e610167366004611415565b6103f1565b61017f61017a36600461152e565b61045c565b604051908152602001610150565b61012e61019b36600461156f565b61054e565b61012e61057b565b61012e6105b1565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610150565b6101bd6101e336600461156f565b610630565b61017f6101f636600461158c565b610662565b61017f60665481565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b61012e610239366004611443565b6107a7565b6101bd61024c366004611443565b6107b5565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b61014361028636600461156f565b6107c8565b61017f60675481565b61012e6102a236600461156f565b61088e565b6033546001600160a01b031633146102da5760405162461bcd60e51b81526004016102d1906115b8565b60405180910390fd5b60675460408051918252602082018390527f5b873fc01d45058fe77f3883a91020f46d5a7385baac6ceab19748d1d0ae464a910160405180910390a1606755565b6103236113b4565b600061032f8484610926565b6001600160a01b03908116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff161515610100820152949350505050565b6033546001600160a01b0316331461041b5760405162461bcd60e51b81526004016102d1906115b8565b60665460408051918252602082018390527f05c6144bfed9f2471c3de6f59bd591c7276daeac7b813b7fea4aef03a4473934910160405180910390a1606655565b6001600160a01b038281166000908152606560209081526040808320815161012081018352815486168152600182015490951685840152600281015485830152600381015460608601528151808401835260048201546001600160e01b039081168252608087019190915282519384019092526005810154909116825260a0840191909152600601546001600160d81b03811660c0840152600160d81b810463ffffffff1660e0840152600160f81b900460ff161515610100830181905290919061053a5760405163617dac3760e01b815260040160405180910390fd5b6105458584836109bd565b95945050505050565b610578817f0000000000000000000000000000000000000000000000000000000000000000610a60565b50565b6033546001600160a01b031633146105a55760405162461bcd60e51b81526004016102d1906115b8565b6105af6000610c36565b565b60006105bd6001610c88565b905080156105d5576000805461ff0019166101001790555b6105dd610d15565b610258606755600a6066558015610578576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600061065c827f0000000000000000000000000000000000000000000000000000000000000000610d44565b92915050565b60008061068f847f0000000000000000000000000000000000000000000000000000000000000000610926565b6001600160a01b03818116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff16151561010082018190529192509061076c5760405163617dac3760e01b815260040160405180910390fd5b6066548160c001516001600160d81b0316101561079c57604051632ec65bab60e11b815260040160405180910390fd5b6105458585836109bd565b6107b18282610a60565b5050565b60006107c18383610926565b9392505050565b6107d06113b4565b506001600160a01b03908116600090815260656020908152604091829020825161012081018452815485168152600182015490941684830152600281015484840152600381015460608501528251808301845260048201546001600160e01b039081168252608086019190915283519283019093526005810154909216815260a0830152600601546001600160d81b03811660c0830152600160d81b810463ffffffff1660e0830152600160f81b900460ff16151561010082015290565b6033546001600160a01b031633146108b85760405162461bcd60e51b81526004016102d1906115b8565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d1565b61057881610c36565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906115ed565b600081600001516001600160a01b0316846001600160a01b031603610a065760808201516109f6906109ef9085610db9565b5160701c90565b6001600160901b031690506107c1565b81602001516001600160a01b0316846001600160a01b031614610a3c5760405163c1ab6dc160e01b815260040160405180910390fd5b60a0820151610a4f906109ef9085610db9565b6001600160901b0316949350505050565b6000610a6c8383610926565b90506001600160a01b03811615610c31576001600160a01b03811660009081526065602052604090206006810154600160f81b900460ff1615610c25576000806000610ab785610e57565b92509250925082600014158015610acd57508115155b15610c1d576006840154600090610af190600160d81b900463ffffffff1683611620565b90506067548163ffffffff1610610c1b57600060405180602001604052808363ffffffff16886002015488610b269190611645565b610b309190611672565b6001600160e01b03168152509050600060405180602001604052808463ffffffff16896003015488610b629190611645565b610b6c9190611672565b6001600160e01b03908116909152835160048a0180549183166001600160e01b0319928316179055825160058b018054919093169116179055600288018790556003880186905560068801805463ffffffff8716600160d81b0263ffffffff60d81b198216811783559293509091600091610bf4916001600160d81b03908116911617611686565b91906101000a8154816001600160d81b0302191690836001600160d81b0316021790555050505b505b505050610c2f565b610c2f8484611067565b505b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610ccf578160ff166001148015610cab5750303b155b610cc75760405162461bcd60e51b81526004016102d1906116b4565b506000919050565b60005460ff808416911610610cf65760405162461bcd60e51b81526004016102d1906116b4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610d3c5760405162461bcd60e51b81526004016102d190611702565b6105af611340565b6040516364e329cb60e11b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c9c65396906044016020604051808303816000875af1158015610999573d6000803e3d6000fd5b6040805160208101909152600081526000821580610df6575083516001600160e01b031683610de8818361174d565b9250610df49083611672565b145b610e425760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f770000000000000060448201526064016102d1565b60408051602081019091529081529392505050565b6000806000610e64611370565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec8919061176c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c919061176c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f95919061179c565b9250925092508363ffffffff168163ffffffff1614158015610fbf57506001600160701b03831615155b8015610fd357506001600160701b03821615155b1561105d576000610fe48286611620565b90508063ffffffff1661100985610ffa86611386565b6001600160e01b03169061139f565b6001600160e01b031661101c919061174d565b61102690886117ec565b96508063ffffffff1661103c84610ffa87611386565b6001600160e01b031661104f919061174d565b61105990876117ec565b9550505b5050509193909250565b60006110738383610926565b6001600160a01b0381166000908152606560205260409020600681015491925090600160f81b900460ff16156110bc5760405163202c6ac160e11b815260040160405180910390fd5b60008290506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611125919061179c565b92505050816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b91906115ed565b83546001600160a01b0319166001600160a01b039182161784556040805163d21220a760e01b815290519184169163d21220a7916004808201926020929091908290030181865afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120891906115ed565b8360010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611292919061176c565b8360020181905550816001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061176c565b6003840155600690920180546001600160f81b0363ffffffff909416600160d81b02939093166001600160d81b0390931692909217600160f81b1790915550505050565b600054610100900460ff166113675760405162461bcd60e51b81526004016102d190611702565b6105af33610c36565b600061138164010000000042611804565b905090565b600061065c600160701b6001600160701b038416611818565b60006107c16001600160701b03831684611847565b60408051610120810182526000808252602080830182905282840182905260608301829052835180820185528281526080840152835190810190935280835260a082019290925260c0810182905260e0810182905261010081019190915290565b60006020828403121561142757600080fd5b5035919050565b6001600160a01b038116811461057857600080fd5b6000806040838503121561145657600080fd5b82356114618161142e565b915060208301356114718161142e565b809150509250929050565b81516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080808301516101208301916114cd90840182516001600160e01b03169052565b5060a08301516114e960a0840182516001600160e01b03169052565b5060c083015161150460c08401826001600160d81b03169052565b5060e083015161151c60e084018263ffffffff169052565b50610100928301511515919092015290565b60008060006060848603121561154357600080fd5b833561154e8161142e565b9250602084013561155e8161142e565b929592945050506040919091013590565b60006020828403121561158157600080fd5b81356107c18161142e565b6000806040838503121561159f57600080fd5b82356115aa8161142e565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156115ff57600080fd5b81516107c18161142e565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8381169083168181101561163d5761163d61160a565b039392505050565b6000828210156116575761165761160a565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826116815761168161165c565b500490565b60006001600160d81b038281166002600160d81b031981016116aa576116aa61160a565b6001019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008160001904831182151516156117675761176761160a565b500290565b60006020828403121561177e57600080fd5b5051919050565b80516001600160701b0381168114610d1057600080fd5b6000806000606084860312156117b157600080fd5b6117ba84611785565b92506117c860208501611785565b9150604084015163ffffffff811681146117e157600080fd5b809150509250925092565b600082198211156117ff576117ff61160a565b500190565b6000826118135761181361165c565b500690565b60006001600160e01b038281168482168115158284048211161561183e5761183e61160a565b02949350505050565b60006001600160e01b03838116806118615761186161165c565b9216919091049291505056fea2646970667358221220222b01e634989746ab9f9edcf26948184c69162ea27ca2382bad9c5a81f35db764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "1. Store cumulative prices for each pair in the pool 2. Update to calculate twap and update for each pair",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17964,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "_getTwap",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(PairInfo)22162_storage)"
      },
      {
        "astId": 17967,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "minimumPairInfoUpdate",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 17970,
        "contract": "src/contracts/PriceOracle.sol:PriceOracle",
        "label": "period",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PairInfo)22162_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceOracle.PairInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PairInfo)22162_storage"
      },
      "t_struct(PairInfo)22162_storage": {
        "encoding": "inplace",
        "label": "struct IPriceOracle.PairInfo",
        "members": [
          {
            "astId": 22143,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22145,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 22147,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "price0CumulativeLast",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 22149,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "price1CumulativeLast",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 22152,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "price0Average",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(uq112x112)24442_storage"
          },
          {
            "astId": 22155,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "price1Average",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(uq112x112)24442_storage"
          },
          {
            "astId": 22157,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "totalUpdates",
            "offset": 0,
            "slot": "6",
            "type": "t_uint216"
          },
          {
            "astId": 22159,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "blockTimestampLast",
            "offset": 27,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 22161,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "exists",
            "offset": 31,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(uq112x112)24442_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 24441,
            "contract": "src/contracts/PriceOracle.sol:PriceOracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}