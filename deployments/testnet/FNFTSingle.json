{
  "address": "0x1c9fD50dF7a4f066884b58A05D91e4b55005876A",
  "abi": [
    {
      "inputs": [],
      "name": "AuctionEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotRaise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxFlashLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoanNotRepaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuctionLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFlashLoanReturnValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnUpdate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCurator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughVoters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameCurator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "AuctionLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AuctionWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BidMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "CashWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorFee",
          "type": "uint256"
        }
      ],
      "name": "CuratorFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorFee",
          "type": "uint256"
        }
      ],
      "name": "CuratorFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCurator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCurator",
          "type": "address"
        }
      ],
      "name": "CuratorKicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCurator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCurator",
          "type": "address"
        }
      ],
      "name": "CuratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        }
      ],
      "name": "TokenRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_curator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_listPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_curatorFee",
          "type": "uint256"
        }
      ],
      "name": "__FNFTSingle_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionState",
      "outputs": [
        {
          "internalType": "enum IFNFTSingle.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyItNow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyItNowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCuratorFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IFNFTSingleFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrowerUpgradeable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curator",
          "type": "address"
        }
      ],
      "name": "kickCurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setAuctionLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curator",
          "type": "address"
        }
      ],
      "name": "setCurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_curatorFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setVaultMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newUserReserve",
          "type": "uint256"
        }
      ],
      "name": "updateUserPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winning",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3061649987b2058851de4c1d3994a8a3ff3a0bbff82dec751a1bbedcc70e4fe5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1c9fD50dF7a4f066884b58A05D91e4b55005876A",
    "transactionIndex": 0,
    "gasUsed": "3784344",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2da5145cd993c8564d9c336238f15d48a05e0b4b4a03dec7ab2f1897c3d9e07",
    "transactionHash": "0x3061649987b2058851de4c1d3994a8a3ff3a0bbff82dec751a1bbedcc70e4fe5",
    "logs": [],
    "blockNumber": 3693486,
    "cumulativeGasUsed": "3784344",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "961fec123a75984f6857e077cf799290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AuctionEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotRaise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxFlashLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoanNotRepaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuctionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashLoanReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCurator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughVoters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameCurator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"AuctionLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"CashWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorFee\",\"type\":\"uint256\"}],\"name\":\"CuratorFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorFee\",\"type\":\"uint256\"}],\"name\":\"CuratorFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCurator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"CuratorKicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCurator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"CuratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"TokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_listPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curatorFee\",\"type\":\"uint256\"}],\"name\":\"__FNFTSingle_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionState\",\"outputs\":[{\"internalType\":\"enum IFNFTSingle.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyItNow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyItNowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCuratorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFNFTSingleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrowerUpgradeable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"}],\"name\":\"kickCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setAuctionLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"}],\"name\":\"setCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curatorFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setVaultMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUserReserve\",\"type\":\"uint256\"}],\"name\":\"updateUserPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winning\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"kickCurator(address)\":{\"params\":{\"_curator\":\"the new curator\"}},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amont of token that can be loaned.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionLength(uint256)\":{\"params\":{\"_length\":\"the new base price\"}},\"setCurator(address)\":{\"params\":{\"_curator\":\"the new curator\"}},\"setFee(uint256)\":{\"params\":{\"_curatorFee\":\"the new fee\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateUserPrice(uint256)\":{\"params\":{\"newUserReserve\":\"the desired price in ETH\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AuctionStarted(address,uint256)\":{\"notice\":\"An event emitted when an auction starts\"},\"AuctionWon(address,uint256)\":{\"notice\":\"An event emitted when an auction is won\"},\"BidMade(address,uint256)\":{\"notice\":\"An event emitted when a bid is made\"},\"CashWithdrawn(address,uint256)\":{\"notice\":\"An event emitted when someone cashes in ERC20 tokens for ETH from an ERC721 token sale\"},\"PriceUpdated(address,uint256)\":{\"notice\":\"An event emitted when a user updates their price\"},\"TokenRedeemed(address)\":{\"notice\":\"An event emitted when someone redeems all tokens for the NFT\"}},\"kind\":\"user\",\"methods\":{\"auctionEnd()\":{\"notice\":\"the unix timestamp end time of the token auction\"},\"auctionLength()\":{\"notice\":\"the length of auctions\"},\"bid()\":{\"notice\":\"an external function to bid on purchasing the vaults NFT. The msg.value is the bid amount\"},\"cash()\":{\"notice\":\"an external function to burn ERC20 tokens to receive ETH from ERC721 token purchase\"},\"claimCuratorFees()\":{\"notice\":\"external function to claim fees for the curator and governance\"},\"curator()\":{\"notice\":\"the address who initially deposited the NFT\"},\"curatorFee()\":{\"notice\":\"the AUM fee paid to the curator yearly. 3 decimals. ie. 100 = 10%\"},\"end()\":{\"notice\":\"an external function to end an auction after the timer has run out\"},\"factory()\":{\"notice\":\"the governance contract which gets paid in ETH\"},\"initialReserve()\":{\"notice\":\"initial price of NFT set by curator on creation\"},\"kickCurator(address)\":{\"notice\":\"allow governance to boot a bad actor curator\"},\"lastClaimed()\":{\"notice\":\"the last timestamp where fees were claimed\"},\"livePrice()\":{\"notice\":\"the current price of the token during an auction\"},\"redeem()\":{\"notice\":\"an external function to burn all ERC20 tokens to receive the ERC721 token\"},\"removeReserve(address)\":{\"notice\":\"allow governance to remove bad reserve prices\"},\"reserveTotal()\":{\"notice\":\"reservePrice * votingTokens\"},\"setAuctionLength(uint256)\":{\"notice\":\"allow curator to update the auction length\"},\"setCurator(address)\":{\"notice\":\"allow curator to update the curator address\"},\"setFee(uint256)\":{\"notice\":\"allow the curator to change their fee\"},\"start()\":{\"notice\":\"kick off an auction. Must send reservePrice in ETH\"},\"token()\":{\"notice\":\"the ERC721 token address of the vault's token\"},\"tokenId()\":{\"notice\":\"the ERC721 token id of the nft's token\"},\"updateUserPrice(uint256)\":{\"notice\":\"a function for an end user to update their desired sale price\"},\"userReservePrice(address)\":{\"notice\":\"a mapping of users to their desired token price\"},\"vaultManager()\":{\"notice\":\"the governance contract for all FNFTSingles\"},\"verified()\":{\"notice\":\"whether or not this FNFTSingle has been verified by DAO\"},\"votingTokens()\":{\"notice\":\"the number of ownership tokens voting on the reserve price at any given time\"},\"winning()\":{\"notice\":\"the current user winning the token auction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/FNFTSingle.sol\":\"FNFTSingle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x51e5fea61116bd84d45c4bbb0d7923ab0ab182e923b0187667f146327d6ef496\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashLenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLenderUpgradeable {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa31d534e79c2275bdef26559e5c03ff1d45fee94d0007130e67ee9273263b973\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"src/contracts/FNFTSingle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IPriceOracle} from \\\"./PriceOracle.sol\\\";\\nimport \\\"./interfaces/IIFO.sol\\\";\\nimport \\\"./interfaces/IIFOFactory.sol\\\";\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./interfaces/IFNFTSingle.sol\\\";\\nimport \\\"./interfaces/IFNFTSingleFactory.sol\\\";\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./token/ERC20FlashMintUpgradeable.sol\\\";\\n\\ncontract FNFTSingle is\\n    IFNFTSingle,\\n    OwnableUpgradeable,\\n    IERC165,\\n    ERC20FlashMintUpgradeable,\\n    ERC721HolderUpgradeable\\n{\\n    using Address for address;\\n\\n    /// @notice a mapping of users to their desired token price\\n    mapping(address => uint256) public override userReservePrice;\\n\\n    State public override auctionState;\\n\\n    IUniswapV2Pair public override pair;\\n\\n    /// @notice the governance contract for all FNFTSingles\\n    IVaultManager public override vaultManager;\\n\\n    /// @notice the governance contract which gets paid in ETH\\n    IFNFTSingleFactory public override factory;\\n\\n    /// @notice the address who initially deposited the NFT\\n    address public override curator;\\n\\n    /// @notice the ERC721 token address of the vault's token\\n    address public override token;\\n\\n    /// @notice the current user winning the token auction\\n    address payable public override winning;\\n\\n    /// @notice whether or not this FNFTSingle has been verified by DAO\\n    bool public override verified;\\n\\n    /// @notice the unix timestamp end time of the token auction\\n    uint256 public override auctionEnd;\\n\\n    /// @notice the length of auctions\\n    uint256 public override auctionLength;\\n\\n    /// @notice the AUM fee paid to the curator yearly. 3 decimals. ie. 100 = 10%\\n    uint256 public override curatorFee;\\n\\n    /// @notice the ERC721 token id of the nft's token\\n    uint256 public override tokenId;\\n\\n    /// @notice initial price of NFT set by curator on creation\\n    uint256 public override initialReserve;\\n\\n    /// @notice the last timestamp where fees were claimed\\n    uint256 public override lastClaimed;\\n\\n    /// @notice the current price of the token during an auction\\n    uint256 public override livePrice;\\n\\n    /// @notice reservePrice * votingTokens\\n    uint256 public override reserveTotal;\\n\\n    uint256 public override vaultId;\\n\\n    /// @notice the number of ownership tokens voting on the reserve price at any given time\\n    uint256 public override votingTokens;\\n\\n    function __FNFTSingle_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _curator,\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _supply,\\n        uint256 _listPrice,\\n        uint256 _curatorFee\\n    ) external override initializer {\\n        if (_curator == address(0)) revert ZeroAddress();\\n        if (_token == address(0)) revert ZeroAddress();\\n\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol);\\n        __ERC721Holder_init();\\n\\n        IFNFTSingleFactory _factory = IFNFTSingleFactory(msg.sender);\\n        IVaultManager _vaultManager = IVaultManager(_factory.vaultManager());\\n\\n        if (_curatorFee > _factory.maxCuratorFee()) revert FeeTooHigh();\\n\\n        // set storage variables\\n        factory = _factory;\\n        vaultManager = _vaultManager;\\n        token = _token;\\n        vaultId = _vaultManager.numVaults();\\n        tokenId = _tokenId;\\n        auctionLength = 3 days;\\n        curator = _curator;\\n        curatorFee = _curatorFee;\\n        lastClaimed = block.timestamp;\\n        userReservePrice[_curator] = _listPrice;\\n        initialReserve = _listPrice;\\n        pair = IUniswapV2Pair(IPriceOracle(_vaultManager.priceOracle()).createFNFTPair(address(this)));\\n        _mint(_curator, _supply);\\n    }\\n\\n    /// @notice an external function to bid on purchasing the vaults NFT. The msg.value is the bid amount\\n    function bid() external payable override {\\n        _onlyOwnerIfPaused(4);\\n        if (auctionState != State.Live) revert AuctionNotLive();\\n        uint256 increase = factory.minBidIncrease() + 10000;\\n        if (msg.value * 10000 < livePrice * increase) revert BidTooLow();\\n        if (block.timestamp >= auctionEnd) revert AuctionEnded();\\n\\n        // If bid is within 15 minutes of auction end, extend auction\\n        if (auctionEnd - block.timestamp <= 15 minutes) {\\n            auctionEnd += 15 minutes;\\n        }\\n\\n        _sendETHOrWETH(winning, livePrice);\\n\\n        livePrice = msg.value;\\n        winning = payable(msg.sender);\\n\\n        emit BidMade(msg.sender, msg.value);\\n    }\\n\\n    /// @notice an external function to burn ERC20 tokens to receive ETH from ERC721 token purchase\\n    function cash() external override {\\n        _onlyOwnerIfPaused(4);\\n        if (auctionState != State.Ended) revert AuctionNotEnded();\\n        uint256 bal = balanceOf(msg.sender);\\n        if (bal == 0) revert NoTokens();\\n\\n        uint256 share = (bal * address(this).balance) / totalSupply();\\n        _burn(msg.sender, bal);\\n\\n        _sendETHOrWETH(payable(msg.sender), share);\\n\\n        emit CashWithdrawn(msg.sender, share);\\n    }\\n\\n    /// @notice external function to claim fees for the curator and governance\\n    function claimCuratorFees() external override {\\n        _onlyOwnerIfPaused(6);\\n        _claimCuratorFees();\\n    }\\n\\n    function buyItNow() external payable override {\\n        _onlyOwnerIfPaused(3);\\n        if (auctionState != State.Inactive) revert AuctionLive();\\n        uint256 price = buyItNowPrice();\\n        if (price == 0) revert PriceTooLow();\\n        if (msg.value < price) revert NotEnoughETH();\\n\\n        _claimCuratorFees();\\n\\n        // deposit weth\\n        IWETH(vaultManager.WETH()).deposit{value: msg.value}();\\n\\n        // transfer erc721 to buyer\\n        IERC721(token).transferFrom(address(this), msg.sender, tokenId);\\n\\n        auctionState = State.Ended;\\n\\n        emit AuctionWon(msg.sender, price);\\n    }\\n\\n    /// @notice an external function to end an auction after the timer has run out\\n    function end() external override {\\n        _onlyOwnerIfPaused(4);\\n        if (auctionState != State.Live) revert AuctionNotLive();\\n        if (block.timestamp < auctionEnd) revert AuctionNotEnded();\\n\\n        _claimCuratorFees();\\n\\n        // transfer erc721 to winner\\n        IERC721(token).transferFrom(address(this), winning, tokenId);\\n\\n        auctionState = State.Ended;\\n\\n        emit AuctionWon(winning, livePrice);\\n    }\\n\\n    function getAuctionPrice() external view override returns (uint256) {\\n        return _getAuctionPrice();\\n    }\\n\\n    function getQuorum() external view override returns (uint256) {\\n        return _getQuorum();\\n    }\\n\\n    /// @notice allow governance to boot a bad actor curator\\n    /// @param _curator the new curator\\n    function kickCurator(address _curator) external override onlyOwner {\\n        if (curator == _curator) revert SameCurator();\\n        emit CuratorKicked(curator, _curator);\\n        curator = _curator;\\n    }\\n\\n    /// @notice an external function to burn all ERC20 tokens to receive the ERC721 token\\n    function redeem() external override {\\n        _onlyOwnerIfPaused(2);\\n        if (auctionState != State.Inactive) revert AuctionLive();\\n        _burn(msg.sender, totalSupply());\\n\\n        // transfer erc721 to redeemer\\n        IERC721(token).transferFrom(address(this), msg.sender, tokenId);\\n\\n        auctionState = State.Redeemed;\\n\\n        emit TokenRedeemed(msg.sender);\\n    }\\n\\n    /// @notice allow governance to remove bad reserve prices\\n    function removeReserve(address _user) external override onlyOwner {\\n        if (auctionState != State.Inactive) revert AuctionLive();\\n\\n        uint256 old = userReservePrice[_user];\\n        if (old == 0) revert NotAnUpdate();\\n\\n        uint256 weight = balanceOf(_user);\\n\\n        votingTokens -= weight;\\n        reserveTotal -= weight * old;\\n\\n        userReservePrice[_user] = 0;\\n\\n        emit PriceUpdated(_user, 0);\\n    }\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external override {\\n        _onlyPrivileged();\\n        _setMetadata(name_, symbol_);\\n    }\\n\\n    /// @notice kick off an auction. Must send reservePrice in ETH\\n    function start() external payable override {\\n        _onlyOwnerIfPaused(4);\\n        if (auctionState != State.Inactive) revert AuctionLive();\\n        uint256 _auctionPrice = _getAuctionPrice();\\n        if (_auctionPrice == 0 || msg.value < _auctionPrice) revert BidTooLow();\\n\\n        auctionEnd = block.timestamp + auctionLength;\\n        auctionState = State.Live;\\n\\n        livePrice = msg.value;\\n        winning = payable(msg.sender);\\n\\n        emit AuctionStarted(msg.sender, msg.value);\\n    }\\n\\n    function toggleVerified() external override onlyOwner {\\n        bool _verified = !verified;\\n        verified = _verified;\\n        emit Verified(_verified);\\n    }\\n\\n    /// @notice allow curator to update the auction length\\n    /// @param _length the new base price\\n    function setAuctionLength(uint256 _length) external override {\\n        _onlyPrivileged();\\n        if (\\n            _length < factory.minAuctionLength() || _length > factory.maxAuctionLength()\\n        ) revert InvalidAuctionLength();\\n\\n        auctionLength = _length;\\n        emit AuctionLengthUpdated(_length);\\n    }\\n\\n    /// @notice allow curator to update the curator address\\n    /// @param _curator the new curator\\n    function setCurator(address _curator) external override {\\n        _onlyPrivileged();\\n        if (curator == _curator) revert SameCurator();\\n        emit CuratorUpdated(curator, _curator);\\n        curator = _curator;\\n    }\\n\\n    /// @notice allow the curator to change their fee\\n    /// @param _curatorFee the new fee\\n    function setFee(uint256 _curatorFee) external override {\\n        _onlyPrivileged();\\n        if (_curatorFee >= curatorFee) revert CanNotRaise();\\n        if (_curatorFee > factory.maxCuratorFee()) revert FeeTooHigh();\\n\\n        _claimCuratorFees();\\n\\n        curatorFee = _curatorFee;\\n        emit CuratorFeeUpdated(_curatorFee);\\n    }\\n\\n    /// @notice a function for an end user to update their desired sale price\\n    /// @param newUserReserve the desired price in ETH\\n    function updateUserPrice(uint256 newUserReserve) external override {\\n        _onlyOwnerIfPaused(7);\\n        if (auctionState != State.Inactive) revert AuctionLive();\\n        uint256 previousUserReserve = userReservePrice[msg.sender];\\n        if (newUserReserve == previousUserReserve) revert NotAnUpdate();\\n\\n        uint256 weight = balanceOf(msg.sender);\\n\\n        if (votingTokens == 0) {\\n            _validateUserPrice(initialReserve, newUserReserve);\\n\\n            votingTokens = weight;\\n            reserveTotal = weight * newUserReserve;\\n        }\\n        // they are the only one voting\\n        else if (weight == votingTokens && previousUserReserve != 0) {\\n            _validateUserPrice(previousUserReserve, newUserReserve);\\n\\n            reserveTotal = weight * newUserReserve;\\n        }\\n        // previously they were not voting\\n        else if (previousUserReserve == 0) {\\n            uint256 averageReserve = reserveTotal / votingTokens;\\n\\n            _validateUserPrice(averageReserve, newUserReserve);\\n\\n            votingTokens += weight;\\n            reserveTotal += weight * newUserReserve;\\n        }\\n        // they no longer want to vote\\n        else if (newUserReserve == 0) {\\n            votingTokens -= weight;\\n            reserveTotal -= weight * previousUserReserve;\\n        }\\n        // they are updating their vote\\n        else {\\n            uint256 averageReserve = (reserveTotal - (previousUserReserve * weight)) / (votingTokens - weight);\\n\\n            _validateUserPrice(averageReserve, newUserReserve);\\n\\n            reserveTotal = reserveTotal + (weight * newUserReserve) - (weight * previousUserReserve);\\n        }\\n\\n        userReservePrice[msg.sender] = newUserReserve;\\n\\n        emit PriceUpdated(msg.sender, newUserReserve);\\n    }\\n\\n    function buyItNowPrice() public view override returns (uint256) {\\n        return (_getAuctionPrice() * factory.instantBuyMultiplier()) / 10;\\n    }\\n\\n    function flashFee(address borrowedToken, uint256 amount) public view override (\\n        IERC3156FlashLenderUpgradeable,\\n        IFNFTSingle\\n    ) returns (uint256) {\\n        if (borrowedToken != address(this)) revert InvalidToken();\\n        return factory.flashLoanFee() * amount / 10000;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override (\\n        IERC3156FlashLenderUpgradeable,\\n        IFNFTSingle\\n    ) returns (bool) {\\n        _onlyOwnerIfPaused(5);\\n        uint256 flashLoanFee = vaultManager.excludedFromFees(address(receiver)) ? 0 : flashFee(borrowedToken, amount);\\n        return _flashLoan(receiver, borrowedToken, amount, flashLoanFee, data);\\n    }\\n\\n    function reservePrice() public view override returns (uint256) {\\n        return votingTokens == 0 ? 0 : reserveTotal / votingTokens;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override(IERC165) returns (bool) {\\n        return interfaceId == type(IFNFTSingle).interfaceId ||\\n                interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    // Sending ETH is not guaranteed complete, and the method used here will return false if\\n    // it fails. For example, a contract can block ETH transfer, or might use\\n    // an excessive amount of gas, thereby griefing a new bidder.\\n    // We should limit the gas used in transfers, and handle failure cases.\\n    function _attemptETHTransfer(address to, uint256 value) internal returns (bool) {\\n        // Here increase the gas limit a reasonable amount above the default, and try\\n        // to send ETH to the recipient.\\n        // NOTE: This might allow the recipient to attempt a limited reentrancy attack.\\n        (bool success, ) = to.call{value: value, gas: 30000}(\\\"\\\");\\n        return success;\\n    }\\n\\n    function _afterTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal virtual override {\\n        address priceOracle = vaultManager.priceOracle();\\n        if (priceOracle != address(0)) {\\n            IPriceOracle(priceOracle).updateFNFTPairInfo(address(this));\\n        }\\n    }\\n\\n    /// @notice an internal function used to update sender and receivers price on token transfer\\n    /// @param _from the ERC20 token sender\\n    /// @param _to the ERC20 token receiver\\n    /// @param _amount the ERC20 token amount\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual override {\\n        if (auctionState == State.Inactive) {\\n            uint256 sendersReservePrice = userReservePrice[_from];\\n            uint256 receiversReservePrice = userReservePrice[_to];\\n            // only do something if users have different reserve price\\n            if (receiversReservePrice != sendersReservePrice) {\\n                // Receiver has not voted on a reserve price\\n                // NOTE: the sender address could have voted or not\\n                if (receiversReservePrice == 0) {\\n                    // subtract the total amount of tokens voting on what the reserve price should be\\n                    // NOTE: there would never be a situation where the sender has not voted, because all the tokens are minted to the curator on init,\\n                    //     _and_ the curator's votes are initially set at the list price\\n                    votingTokens -= _amount;\\n                    // subtract the avg reserve price by the amount of tokens the\\n                    reserveTotal -= _amount * sendersReservePrice;\\n                }\\n                // the new holder is a voter (implied from the `else`) _and_ old holder is not a voter\\n                else if (sendersReservePrice == 0) {\\n                    // since the new holder is a voter: add the tokens being sent to the amount of tokens currently voting\\n                    votingTokens += _amount;\\n                    // _and_ since they are a voter:\\n                    // multiply the amount of tokens they're receiving by their previously set reserve price, since they have specified their reservePrice already\\n                    reserveTotal += _amount * receiversReservePrice;\\n                }\\n                // both holders are voters\\n                else {\\n                    // set the new reserve price to the previous reserve price, plus the difference between the receivers reserve and the senders reserve (NOTE: could be negative)\\n                    // - edge cases:\\n                    //      - the sender and receiver are the only voters and they have the same vote \\u2705\\n                    //      - the sender and receiver are the only voters but the receivers reserve is higher than the senders reserve \\u2705\\n                    reserveTotal = reserveTotal + (_amount * receiversReservePrice) - (_amount * sendersReservePrice);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev interal fuction to calculate and mint fees\\n    function _claimCuratorFees() internal {\\n        if (auctionState == State.Ended) revert AuctionEnded();\\n\\n        // get how much in fees the curator would make in a year\\n        uint256 currentAnnualFee = (curatorFee * totalSupply()) / 10000;\\n        // get how much that is per second;\\n        uint256 feePerSecond = currentAnnualFee / 31536000;\\n        // get how many seconds they are eligible to claim\\n        uint256 sinceLastClaim = block.timestamp - lastClaimed;\\n        // get the amount of tokens to mint\\n        uint256 curatorMint = sinceLastClaim * feePerSecond;\\n\\n        // now lets do the same for governance\\n        address govAddress = vaultManager.feeReceiver();\\n        uint256 govFee = factory.governanceFee();\\n        currentAnnualFee = (govFee * totalSupply()) / 10000;\\n        feePerSecond = currentAnnualFee / 31536000;\\n        uint256 govMint = sinceLastClaim * feePerSecond;\\n\\n        lastClaimed = block.timestamp;\\n\\n        if (curator != address(0)) {\\n            _mint(curator, curatorMint);\\n            emit CuratorFeeClaimed(curatorMint);\\n        }\\n        if (govAddress != address(0)) {\\n            _mint(govAddress, govMint);\\n            emit CuratorFeeClaimed(govMint);\\n        }\\n    }\\n\\n    function _getAuctionPrice() internal view returns (uint256) {\\n        address priceOracle = vaultManager.priceOracle();\\n        bool aboveQuorum = _getQuorum() > factory.minVotePercentage();\\n        uint256 _reservePrice = reservePrice();\\n\\n        if (address(priceOracle) != address(0)) {\\n            (, uint256 reserve1,) = pair.getReserves();\\n\\n            bool aboveLiquidityThreshold = reserve1 * 2 > factory.liquidityThreshold();\\n\\n            if (aboveLiquidityThreshold) {\\n                uint256 twapPrice = _getTWAP();\\n                if (aboveQuorum) {\\n                    //twap price if twap > reserve\\n                    //reserve price if twap < reserve\\n                    return twapPrice > _reservePrice ? twapPrice : _reservePrice;\\n                } else {\\n                    //twap price if twap > initial reserve\\n                    //reserve price if twap < initial reserve\\n                    return twapPrice > initialReserve ? twapPrice : initialReserve;\\n                }\\n            } else {\\n                if (aboveQuorum) {\\n                    //average reserve\\n                    return _reservePrice;\\n                } else {\\n                    //initial reserve\\n                    return initialReserve;\\n                }\\n            }\\n        } else {\\n            return aboveQuorum ? _reservePrice : initialReserve;\\n        }\\n    }\\n\\n    function _getQuorum() internal view returns (uint256) {\\n        IIFO ifo = IIFO(IIFOFactory(vaultManager.ifoFactory()).ifos(address(this)));\\n        if (address(ifo) != address(0) && ifo.ended() && ifo.fnftLocked()) {\\n            return votingTokens * 10000 / (totalSupply() - ifo.lockedSupply());\\n        } else {\\n            return votingTokens * 10000 / totalSupply();\\n        }\\n    }\\n\\n    function _getTWAP() internal view returns (uint256) {\\n        try IPriceOracle(vaultManager.priceOracle()).getFNFTPriceETH(address(this), totalSupply()) returns (uint256 twapPrice) {\\n            return twapPrice;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _onlyOwnerIfPaused(uint256 lockId) internal view {\\n        if (msg.sender != owner() && IPausable(address(factory)).isPaused(lockId)) revert Paused();\\n    }\\n\\n    function _onlyPrivileged() internal view {\\n        if (curator == address(0)) {\\n            if (msg.sender != owner()) revert NotOwner();\\n        } else {\\n            if (msg.sender != curator) revert NotCurator();\\n        }\\n    }\\n\\n    // Will attempt to transfer ETH, but will transfer WETH instead if it fails.\\n    function _sendETHOrWETH(address to, uint256 value) internal {\\n        // Try to transfer ETH to the given recipient.\\n        if (!_attemptETHTransfer(to, value)) {\\n            // If the transfer fails, wrap and send as WETH, so that\\n            // the auction is not impeded and the recipient still\\n            // can claim ETH via the WETH contract (similar to escrow).\\n            IWETH weth = IWETH(vaultManager.WETH());\\n            weth.deposit{value: value}();\\n            weth.transfer(to, value);\\n            // At this point, the recipient can unwrap WETH.\\n        }\\n    }\\n\\n    /// @notice makes sure that the new price does not impact the reserve drastically\\n    function _validateUserPrice(uint256 prevUserReserve, uint256 newUserReserve) private view {\\n        uint256 reservePriceMin = (prevUserReserve * factory.minReserveFactor()) / 10000;\\n        if (newUserReserve < reservePriceMin) revert PriceTooLow();\\n        uint256 reservePriceMax = (prevUserReserve * factory.maxReserveFactor()) / 10000;\\n        if (newUserReserve > reservePriceMax) revert PriceTooHigh();\\n    }\\n\\n    function _chargeAndDistributeFees(address user, uint256 amount) internal override virtual {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // Mint fees directly to the distributor and distribute.\\n        address feeDistributor = vaultManager.feeDistributor();\\n        // Changed to a _transfer() in v1.0.3.\\n        super._transfer(user, feeDistributor, amount);\\n        // IFeeDistributor(feeDistributor).distribute(vaultId);\\n    }\\n}\\n\",\"keccak256\":\"0x0826448a6c7cbec3d34b4dc60d80a917fbb9c2c6cfbdf661e7efbeacd701865c\",\"license\":\"MIT\"},\"src/contracts/PriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./libraries/PriceOracleLibrary.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\n\\n/**\\n    1. Store cumulative prices for each pair in the pool\\n    2. Update to calculate twap and update for each pair\\n*/\\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\\n    using FixedPoint for *;\\n\\n    IUniswapV2Factory public immutable override factory;\\n    address public immutable override WETH;\\n\\n    // Map of pair address to PairInfo struct, which contains cumulative price, last block timestamps, and etc.\\n    mapping(address => PairInfo) private _getTwap;\\n\\n    uint256 public override minimumPairInfoUpdate;\\n    uint256 public override period;\\n\\n    constructor(address _factory, address _weth) {\\n        factory = IUniswapV2Factory(_factory);\\n        WETH = _weth;\\n    }\\n\\n    function __PriceOracle_init() external override initializer {\\n        __Ownable_init();\\n\\n        period = 10 minutes;\\n        minimumPairInfoUpdate = 10;\\n    }\\n\\n    // Get TWAP price of a token.\\n    function consult(\\n        address _token,\\n        address _pair,\\n        uint256 _amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        PairInfo memory pairInfo = _getTwap[_pair];\\n        if (!pairInfo.exists) revert PairInfoDoesNotExist();\\n\\n        amountOut = _calculatePrice(_token, _amountIn, pairInfo);\\n    }\\n\\n    function createFNFTPair(address _token0) external override returns (address) {\\n        return _createPairAddress(_token0, WETH);\\n    }\\n\\n    // Get FNFT TWAP Price in ETH/WETH.\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function getFNFTPriceETH(address _fnft, uint256 _amountIn) external view override returns (uint256 amountOut) {\\n        address pair = _getPairAddress(_fnft, WETH);\\n        PairInfo memory pairInfo = _getTwap[pair];\\n        if (!pairInfo.exists) revert PairInfoDoesNotExist();\\n        if (pairInfo.totalUpdates < minimumPairInfoUpdate) revert NotEnoughUpdates();\\n\\n        amountOut = _calculatePrice(_fnft, _amountIn, pairInfo);\\n    }\\n\\n    // Get pair address from factory. Returns address(0) if not found.\\n    function getPairAddress(address _token0, address _token1) external view override returns (address) {\\n        return _getPairAddress(_token0, _token1);\\n    }\\n\\n    // Get pair info with uniswap v2 pair address.\\n    function getPairInfo(address _pair) external view override returns (PairInfo memory pairInfo) {\\n        pairInfo = _getTwap[_pair];\\n    }\\n\\n    // Get pair info, which includes cumulative prices, last block timestamp, price average, and etc.\\n    function getPairInfo(address _token0, address _token1) external view override returns (PairInfo memory pairInfo) {\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        pairInfo = _getTwap[pairAddress];\\n    }\\n\\n    // Set minimum pair info info update required to get FNFT-WETH TWAP price.\\n    function setMinimumPairInfoUpdate(uint256 _minimumPairInfoUpdate) external override onlyOwner {\\n        emit MinimumPairInfoUpdateUpdated(minimumPairInfoUpdate, _minimumPairInfoUpdate);\\n        minimumPairInfoUpdate = _minimumPairInfoUpdate;\\n    }\\n\\n    // Set minimum period to wait for the next pair info update.\\n    function setPeriod(uint256 _period) external override onlyOwner {\\n        emit PeriodUpdated(period, _period);\\n        period = _period;\\n    }\\n\\n    // Update FNFT-WETH pair info.\\n    function updateFNFTPairInfo(address _fnft) external override {\\n        _updatePairInfo(_fnft, WETH);\\n    }\\n\\n    // Update pair info.\\n    function updatePairInfo(address _token0, address _token1) external override {\\n        _updatePairInfo(_token0, _token1);\\n    }\\n\\n    // Add pair info to price oracle.\\n    function _addPairInfo(address _token0, address _token1) internal {\\n        // Get predetermined pair address.\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        PairInfo storage pairInfo = _getTwap[pairAddress];\\n        if (pairInfo.exists) revert PairInfoAlreadyExists();\\n\\n        // Get pair information for the given pair address.\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n        // Get last block timestamp from reserves.\\n        (, , uint32 blockTimestampLast) = pair.getReserves();\\n\\n        // Initialize pairInfo for the two tokens.\\n        pairInfo.token0 = pair.token0();\\n        pairInfo.token1 = pair.token1();\\n        pairInfo.price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (token1 / token0)\\n        pairInfo.price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (token0 / token1)\\n        pairInfo.blockTimestampLast = blockTimestampLast;\\n        pairInfo.exists = true;\\n    }\\n\\n    // Calculate token twap price based on pair info and the amount in.\\n    function _calculatePrice(address _token, uint256 _amountIn, PairInfo memory _pairInfo) internal pure returns (uint256 amountOut) {\\n        if (_token == _pairInfo.token0) {\\n            amountOut = _pairInfo.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            if (_token != _pairInfo.token1) revert InvalidToken();\\n            amountOut = _pairInfo.price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    // Create pair address from uniswap pair factory.\\n    function _createPairAddress(address _token0, address _token1) internal returns (address) {\\n        return factory.createPair(_token0, _token1);\\n    }\\n\\n    // Get pair address from uniswap pair factory.\\n    function _getPairAddress(address _token0, address _token1) internal view returns (address) {\\n        return factory.getPair(_token0, _token1);\\n    }\\n\\n    // Update pair info of two token pair.\\n    function _updatePairInfo(address _token0, address _token1) internal {\\n        // Get predetermined pair address.\\n        address pairAddress = _getPairAddress(_token0, _token1);\\n        // Update or add pair info if the pair has been created from factory.\\n        if (pairAddress != address(0)){\\n            PairInfo storage pairInfo = _getTwap[pairAddress];\\n            // we want an update to silently skip because it's updated from the token contract itself\\n            if (pairInfo.exists) {\\n                // Get cumulative prices for each token pairs and block timestampe in the pool.\\n                (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = PriceOracleLibrary\\n                    .currentCumulativePrices(pairAddress);\\n                if (price0Cumulative != 0 && price1Cumulative != 0) {\\n                    uint32 timeElapsed = blockTimestamp - pairInfo.blockTimestampLast;\\n                    if (timeElapsed >= period) {\\n                        // Overflow is desired, casting never truncates.\\n                        // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by the time elapsed.\\n                        FixedPoint.uq112x112 memory price0Average = FixedPoint.uq112x112(\\n                            uint224((price0Cumulative - pairInfo.price0CumulativeLast) / timeElapsed)\\n                        );\\n                        FixedPoint.uq112x112 memory price1Average = FixedPoint.uq112x112(\\n                            uint224((price1Cumulative - pairInfo.price1CumulativeLast) / timeElapsed)\\n                        );\\n                        pairInfo.price0Average = price0Average;\\n                        pairInfo.price1Average = price1Average;\\n                        pairInfo.price0CumulativeLast = price0Cumulative;\\n                        pairInfo.price1CumulativeLast = price1Cumulative;\\n                        pairInfo.blockTimestampLast = blockTimestamp;\\n                        ++pairInfo.totalUpdates;\\n                    }\\n                }\\n            } else {\\n                _addPairInfo(_token0, _token1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe517e29e9fd17866dd4bbeb51b7f8716bb0e4684aca8aba7efa445dfd0ac8a01\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\ninterface IFNFT {\\n    function vaultId() external returns (uint256);\\n\\n    function pair() external returns (IUniswapV2Pair);\\n\\n    function factory() external returns (address);\\n\\n    function vaultManager() external returns (IVaultManager);\\n\\n    function verified() external returns (bool);\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    //ERC20 Interface\\n\\n    function decimals() external returns (uint8);\\n\\n    function balanceOf(address _account) external returns (uint256);\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xad47442ec4cbccf4464c71b34558e56e75261c7a483b1f1d8a57d4bfe6bd0d79\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTSingle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IFNFTSingleFactory.sol\\\";\\nimport \\\"../token/ERC20Upgradeable.sol\\\";\\n\\ninterface IFNFTSingle  is IERC20Upgradeable {\\n    enum State {\\n        Inactive,\\n        Live,\\n        Ended,\\n        Redeemed\\n    }\\n\\n    function token() external returns (address);\\n\\n    function winning() external returns (address payable);\\n\\n    function vaultId() external returns (uint256);\\n\\n    function tokenId() external returns (uint256);\\n\\n    function auctionEnd() external returns (uint256);\\n\\n    function auctionLength() external returns (uint256);\\n\\n    function reserveTotal() external returns (uint256);\\n\\n    function livePrice() external returns (uint256);\\n\\n    function pair() external returns (IUniswapV2Pair);\\n\\n    function auctionState() external returns (State);\\n\\n    function factory() external returns (IFNFTSingleFactory);\\n\\n    function vaultManager() external returns (IVaultManager);\\n\\n    function verified() external returns (bool);\\n\\n    function curator() external returns (address);\\n\\n    function curatorFee() external returns (uint256);\\n\\n    function lastClaimed() external returns (uint256);\\n\\n    function votingTokens() external returns (uint256);\\n\\n    function initialReserve() external returns (uint256);\\n\\n    function userReservePrice(address) external returns (uint256);\\n\\n    function __FNFTSingle_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _curator,\\n        address _token,\\n        uint256 _id,\\n        uint256 _supply,\\n        uint256 _listPrice,\\n        uint256 _curatorFee\\n    ) external;\\n\\n    function reservePrice() external view returns (uint256);\\n\\n    function kickCurator(address _curator) external;\\n\\n    function removeReserve(address _user) external;\\n\\n    function toggleVerified() external;\\n\\n    function setCurator(address _curator) external;\\n\\n    function setAuctionLength(uint256 _length) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function claimCuratorFees() external;\\n\\n    function getAuctionPrice() external view returns (uint256);\\n\\n    function buyItNow() external payable;\\n\\n    function buyItNowPrice() external view returns (uint256);\\n\\n    function updateUserPrice(uint256 newUserReserve) external;\\n\\n    function getQuorum() external view returns (uint256);\\n\\n    function start() external payable;\\n\\n    function bid() external payable;\\n\\n    function end() external;\\n\\n    function redeem() external;\\n\\n    function cash() external;\\n\\n    function flashFee(address borrowedToken, uint256 amount) external view returns (uint256);\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    /// @notice An event emitted when a user updates their price\\n    event PriceUpdated(address indexed user, uint256 price);\\n    /// @notice An event emitted when an auction starts\\n    event AuctionStarted(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when a bid is made\\n    event BidMade(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when an auction is won\\n    event AuctionWon(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when someone redeems all tokens for the NFT\\n    event TokenRedeemed(address indexed redeemer);\\n    /// @notice An event emitted when someone cashes in ERC20 tokens for ETH from an ERC721 token sale\\n    event CashWithdrawn(address indexed owner, uint256 shares);\\n    event AuctionLengthUpdated(uint256 length);\\n    event CuratorFeeUpdated(uint256 curatorFee);\\n    event CuratorFeeClaimed(uint256 curatorFee);\\n    event Verified(bool verified);\\n    event CuratorKicked(address indexed oldCurator, address indexed newCurator);\\n    event CuratorUpdated(address indexed oldCurator, address indexed newCurator);\\n\\n    error AuctionEnded();\\n    error AuctionLive();\\n    error AuctionNotEnded();\\n    error AuctionNotLive();\\n    error BidTooLow();\\n    error CanNotRaise();\\n    error FeeTooHigh();\\n    error InvalidAuctionLength();\\n    error NotAnUpdate();\\n    error NotCurator();\\n    error NotEnoughETH();\\n    error NotEnoughVoters();\\n    error NotOwner();\\n    error NoTokens();\\n    error Paused();\\n    error PriceTooHigh();\\n    error PriceTooLow();\\n    error SameCurator();\\n    error InvalidToken();\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x4eec8b7736b3bcf5f4b8c0ea859350334834079a4b9681f4faa6c92138574461\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTSingleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {IPriceOracle} from \\\"./IPriceOracle.sol\\\";\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\nimport {IVaultManager} from \\\"./IVaultManager.sol\\\";\\n\\ninterface IFNFTSingleFactory {\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function maxAuctionLength() external view returns (uint256);\\n\\n    function minAuctionLength() external view returns (uint256);\\n\\n    function maxCuratorFee() external view returns (uint256);\\n\\n    function governanceFee() external view returns (uint256);\\n\\n    function minBidIncrease() external view returns (uint256);\\n\\n    function minVotePercentage() external view returns (uint256);\\n\\n    function maxReserveFactor() external view returns (uint256);\\n\\n    function minReserveFactor() external view returns (uint256);\\n\\n    function liquidityThreshold() external view returns (uint256);\\n\\n    function instantBuyMultiplier() external view returns (uint256);\\n\\n    function __FNFTSingleFactory_init(address _vaultManager, address _fnftSingle) external;\\n\\n    function createVault(\\n        address _nft,\\n        uint256 _tokenId,\\n        uint256 _supply,\\n        uint256 _listPrice,\\n        uint256 _fee,\\n        string memory _name,\\n        string memory _symbol\\n    ) external returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function setFactoryFees(\\n        uint256 _governanceFee,\\n        uint256 _maxCuratorFee,\\n        uint256 _flashLoanFee\\n    ) external;\\n\\n    function setFactoryThresholds(\\n        uint256 _maxAuctionLength,\\n        uint256 _minAuctionLength,\\n        uint256 _minReserveFactor,\\n        uint256 _maxReserveFactor,\\n        uint256 _minBidIncrease,\\n        uint256 _minVotePercentage,\\n        uint256 _liquidityThreshold,\\n        uint256 _instantBuyMultiplier\\n    ) external;\\n\\n    event FactoryFeesUpdated(uint256 governanceFee, uint256 maxCuratorFee, uint256 flashLoanFee);\\n    event FactoryThresholdsUpdated(\\n        uint256 maxAuctionLength,\\n        uint256 minAuctionLength,\\n        uint256 minReserveFactor,\\n        uint256 maxReserveFactor,\\n        uint256 minBidIncrease,\\n        uint256 minVotePercentage,\\n        uint256 liquidityThreshold,\\n        uint256 instantBuyMultiplier\\n    );\\n    event FeeExclusionUpdated(address target, bool excluded);\\n    event VaultCreated(\\n        uint256 indexed vaultId,\\n        address curator,\\n        address vaultAddress,\\n        address assetAddress,\\n        uint256 tokenId,\\n        uint256 supply,\\n        uint256 listPrice,\\n        string name,\\n        string symbol\\n    );\\n    event VaultCurated(\\n        address vaultAddress,\\n        address curator,\\n        uint256 supply,\\n        uint256 listPrice,\\n        uint256 fee\\n    );\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MaxReserveFactorTooLow();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x8adf8ad9d83641722a25bf4b37247afceebae7c5b07c1a18e2451f28c4f1f230\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./ITimelockExcludeList.sol\\\";\\n\\n\\ninterface IFNFTStaking {\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function inventoryLockTimeErc20() external view returns (uint256);\\n\\n    function timelockExcludeList() external view returns (ITimelockExcludeList);\\n\\n    function __FNFTStaking_init(address _vaultManager) external;\\n\\n    function setTimelockExcludeList(address _timelockExcludeList) external;\\n\\n    function setInventoryLockTimeErc20(uint256 _inventoryLockTimeErc20) external;\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId) external returns (bool);\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external returns (uint256);\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n\\n    function xTokenShareValue(uint256 vaultId) external returns (uint256);\\n\\n    function timelockUntil(uint256 vaultId, address who) external returns (uint256);\\n\\n    function balanceOf(uint256 vaultId, address who) external returns (uint256);\\n\\n    function xTokenAddr(address baseToken) external returns (address);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event BaseTokenDeposited(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, uint256 timelockUntil, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 baseTokenAmount, uint256 amount, address sender);\\n\\n    event InventoryLockTimeErc20Updated(uint256 oldInventoryLockTimeErc20, uint256 newInventoryLockTimeErc20);\\n    event TimelockExcludeListUpdated(address oldTimelockExcludeList, address newTimelockExcludeList);\\n\\n    error LockTooLong();\\n    error NotExcludedFromFees();\\n    error NotZapContract();\\n    error XTokenNotDeployed();\\n\\n}\",\"keccak256\":\"0xcdb51e91728e2f01a8b9090be9012d7f058c0b4875746782707a7d8d81e2706d\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./ILPStaking.sol\\\";\\nimport \\\"./IFNFTStaking.sol\\\";\\n\\ninterface IFeeDistributor {\\n\\n  struct FeeReceiver {\\n    uint256 allocPoint;\\n    address receiver;\\n    bool isContract;\\n  }\\n\\n  function distributionPaused() external returns (bool);\\n\\n  function vaultManager() external returns (IVaultManager);\\n\\n  function lpStaking() external returns (ILPStaking);\\n\\n  function fnftStaking() external returns (IFNFTStaking);\\n\\n  function treasury() external returns (address);\\n\\n  function allocTotal() external returns (uint256);\\n\\n  function feeReceivers(uint256) external returns (uint256, address, bool);\\n\\n  function __FeeDistributor_init(address _vaultManager, address _lpStaking, address _treasury) external;\\n\\n  function rescueTokens(address token) external;\\n\\n  function distribute(uint256 vaultId) external;\\n\\n  function addReceiver(uint256 _allocPoint, address _receiver, bool _isContract) external;\\n\\n  function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n  function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\\n\\n  function changeReceiverAddress(uint256 _idx, address _address, bool _isContract) external;\\n\\n  function removeReceiver(uint256 _receiverIdx) external;\\n\\n  function setTreasuryAddress(address _treasury) external;\\n\\n  function setLPStakingAddress(address _lpStaking) external;\\n\\n  function setFNFTStakingAddress(address _inventoryStaking) external;\\n\\n  function pauseFeeDistribution(bool _pause) external;\\n\\n  event TreasuryAddressUpdated(address newTreasury);\\n  event LPStakingAddressUpdated(address newLPStaking);\\n  event FNFTStakingAddressUpdated(address newFNFTStaking);\\n  event DistributionPaused(bool paused);\\n  event FeeReceiverAdded(address receiver, uint256 allocPoint);\\n  event FeeReceiverAllocUpdated(address receiver, uint256 allocPoint);\\n  event FeeReceiverAddressUpdated(address oldReceiver, address newReceiver);\\n  event FeeReceiverRemoved(address receiver);\\n\\n  error NotVaultManager();\\n  error OutOfBounds();\\n  error ZeroAddress();\\n}\",\"keccak256\":\"0x0bb4491305e0e5122e03adb57d47daca2e3df92389a818ec3fa8463045b9f582\",\"license\":\"MIT\"},\"src/contracts/interfaces/IIFO.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFNFT.sol\\\";\\nimport \\\"./IIFOFactory.sol\\\";\\n\\ninterface IIFO {\\n    struct UserInfo {\\n        uint256 amount; // Amount ETH deposited by user\\n        uint256 debt; // total FNFT claimed thus FNFT debt\\n    }\\n\\n    function curator() external view returns (address);\\n\\n    function factory() external view returns (IIFOFactory);\\n\\n    function fnft() external view returns (IFNFT);\\n\\n    function amountForSale() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function cap() external view returns (uint256);\\n\\n    function totalRaised() external view returns (uint256);\\n\\n    function profitRaised() external view returns (uint256);\\n\\n    function totalSold() external view returns (uint256);\\n\\n    function lockedSupply() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function pauseBlock() external view returns (uint256);\\n\\n    function allowWhitelisting() external view returns (bool);\\n\\n    function started() external view returns (bool);\\n\\n    function ended() external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function userInfo(address) external view returns (uint256, uint256);\\n\\n    function whitelisted(address) external view returns (bool);\\n\\n    function __IFO_init(\\n        address _curator,\\n        address _fnftAddress,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function addMultipleWhitelists(address[] calldata _addresses) external;\\n\\n    function removeWhitelist(address _address) external;\\n\\n    function start() external;\\n\\n    function togglePause() external returns (bool);\\n\\n    function end() external;\\n\\n    function deposit() external payable;\\n\\n    function getUserRemainingAllocation(address _user) external view returns (uint256);\\n\\n    function updateFNFTAddress(address _address) external;\\n\\n    function adminWithdrawProfit() external;\\n\\n    function adminWithdrawFNFT() external;\\n\\n    function approve() external;\\n\\n    function emergencyWithdrawFNFT() external;\\n\\n    function fnftLocked() external view returns (bool);\\n\\n    event FNFTSold(address indexed buyer, uint256 amount, uint256 payout);\\n    event SaleStarted();\\n    event SaleEnded();\\n    event PausedToggled(bool paused);\\n    event AdminProfitWithdrawn(address FNFT, uint256 amount);\\n    event AdminFNFTWithdrawn(address FNFT, uint256 amount);\\n    event EmergencyFNFTWithdrawn(address FNFT, uint256 amount);\\n\\n    error ContractPaused();\\n    error DeadlineActive();\\n    error FNFTLocked();\\n    error InvalidAmountForSale();\\n    error InvalidCap();\\n    error InvalidDuration();\\n    error InvalidPrice();\\n    error InvalidReservePrice();\\n    error NoLiquidityProvided();\\n    error NoProfit();\\n    error NotCurator();\\n    error NotEnoughSupply();\\n    error NotGov();\\n    error NotWhitelisted();\\n    error OverLimit();\\n    error SaleActive();\\n    error SaleAlreadyEnded();\\n    error SaleAlreadyStarted();\\n    error SaleUnstarted();\\n    error TooManyWhitelists();\\n    error TxFailed();\\n    error WhitelistingDisallowed();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x3b02eca7a2ed42739dfd6d35ace53d6e7a47ba3e9eb5c71516f541e0a44df8a1\",\"license\":\"MIT\"},\"src/contracts/interfaces/IIFOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IIFOFactory {\\n    function ifos(address) external view returns (address);\\n\\n    function minimumDuration() external view returns (uint256);\\n\\n    function maximumDuration() external view returns (uint256);\\n\\n    function governanceFee() external view returns (uint256);\\n\\n    function creatorUtilityContract() external view returns (address);\\n\\n    function creatorIFOLock() external view returns (bool);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function __IFOFactory_init() external;\\n\\n    function create(\\n        address _fnft,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setCreatorIFOLock(bool _creatorIFOLock) external;\\n\\n    function setMinimumDuration(uint256 _minimumDuration) external;\\n\\n    function setMaximumDuration(uint256 _maximumDuration) external;\\n\\n    function setCreatorUtilityContract(address _creatorUtilityContract) external;\\n\\n    function setGovernanceFee(uint256 _governanceFee) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    event CreatorIFOLockUpdated(bool oldCreatorIFOLock, bool newCreatorIFOLock);\\n    event MinimumDurationUpdated(uint256 oldMinimumDuration, uint256 newMinimumDuration);\\n    event MaximumDurationUpdated(uint256 oldMaximumDuration, uint256 newMaximumDuration);\\n    event CreatorUtilityContractUpdated(address oldCreatorUtilityContract, address newCreatorUtilityContract);\\n    event GovernanceFeeUpdated(uint256 oldGovernanceFee, uint256 newGovernanceFee);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event IFOCreated(\\n        address indexed ifo,\\n        address indexed fnft,\\n        uint256 amountForSale,\\n        uint256 price,\\n        uint256 cap,\\n        uint256 duration,\\n        bool allowWhitelisting\\n    );\\n\\n    error FeeTooHigh();\\n    error IFOExists(address nft);\\n    error InvalidDuration();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x56a0b20280e9fda765fb03f142517ac0f2f9523ac73080f500801c5d572d9180\",\"license\":\"MIT\"},\"src/contracts/interfaces/ILPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IStakingTokenProvider.sol\\\";\\nimport \\\"../token/LPStakingXTokenUpgradeable.sol\\\";\\n\\ninterface ILPStaking {\\n    struct StakingPool {\\n        address stakingToken;\\n        address baseToken;\\n    }\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function stakingTokenProvider() external view returns (IStakingTokenProvider);\\n\\n    function lpStakingXToken() external view returns (LPStakingXTokenUpgradeable);\\n\\n    function vaultStakingInfo(uint256) external view returns (address, address);\\n\\n    function __LPStaking__init(address _vaultManager, address _stakingTokenProvider) external;\\n\\n    function setStakingTokenProvider(address _stakingTokenProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultIds) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\\n\\n    function exit(uint256 vaultId) external;\\n\\n    function emergencyExitAndClaim(address _stakingToken, address _baseToken) external;\\n\\n    function emergencyExit(address _stakingToken, address _baseToken) external;\\n\\n    function withdrawTo(uint256 vaultId, uint256 amount, address to) external;\\n\\n    function claimRewardsTo(uint256 vaultId, address to) external;\\n\\n    function claimMultipleRewards(uint256[] calldata vaultIds) external;\\n\\n    function xToken(uint256 vaultId) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function xTokenAddr(address stakedToken, address baseToken) external view returns (address);\\n\\n    function balanceOf(uint256 vaultId, address addr) external view returns (uint256);\\n\\n    function lockedUntil(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function lockedLPBalance(uint256 vaultId, address who) external view returns (uint256);\\n\\n    function xToken(StakingPool memory pool) external view returns (LPStakingXTokenUpgradeable);\\n\\n    function retrieveTokens(uint256 vaultId, uint256 amount, address from, address to) external;\\n\\n    event StakingPoolCreated(uint256 vaultId, address xToken, address baseToken);\\n    event StakingPoolUpdated(uint256 vaultId, address xToken);\\n    event FeesReceived(uint256 vaultId, uint256 amount, address xToken);\\n    event LPDeposited(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event XTokenWithdrawn(uint256 vaultId, uint256 amount, address xToken, address sender);\\n    event StakingTokenProviderUpdated(address oldStakingTokenProvider, address newStakingTokenProvider);\\n\\n    error NotAPool();\\n    error NotDeployingProperDistro();\\n    error NotExcludedFromFees();\\n    error NothingToMigrate();\\n    error PoolAlreadyExists();\\n    error PoolDoesNotExist();\\n    error LPStakingXTokenAlreadySet();\\n    error TimelockTooLong();\\n    error VaultManagerAlreadySet();\\n    error VaultManagerNotSet();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x6c8766af488b3c056fb361a8e507618ebf80011baa1aee29d0400942920abbbf\",\"license\":\"MIT\"},\"src/contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPausable {\\n    function isPaused(uint256 pauseId) external view returns (bool);\\n}\",\"keccak256\":\"0xad61c6900eb5e4ccaa76fb05bd9bb680befa31847c1a4a7323244349236a9baf\",\"license\":\"MIT\"},\"src/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/UQ112x112.sol\\\";\\nimport \\\"../libraries/math/FixedPoint.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\n\\ninterface IPriceOracle {\\n    // Struct that contains metadata of two token pair that is stored in the liquidity pool.\\n    // Metadata used to calculated TWAP (Time-weighted average price).\\n    struct PairInfo {\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        FixedPoint.uq112x112 price0Average;\\n        FixedPoint.uq112x112 price1Average;\\n        uint216 totalUpdates;\\n        uint32 blockTimestampLast;\\n        bool exists;\\n    }\\n\\n    function period() external view returns (uint256);\\n\\n    function minimumPairInfoUpdate() external view returns (uint256);\\n\\n    function WETH() external view returns (address);\\n\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    function __PriceOracle_init() external;\\n\\n    function setPeriod(uint256 _period) external;\\n\\n    function setMinimumPairInfoUpdate(uint256 _minimumPairInfoUpdate) external;\\n\\n    function getPairAddress(address _token0, address _token1) external view returns (address);\\n\\n    function getPairInfo(address _token0, address _token1) external view returns (PairInfo memory pairInfo);\\n\\n    function getPairInfo(address _pair) external view returns (PairInfo memory pairInfo);\\n\\n    function updatePairInfo(address _token0, address _token1) external;\\n\\n    function updateFNFTPairInfo(address _fnft) external;\\n\\n    function createFNFTPair(address _token0) external returns (address);\\n\\n    function consult(\\n        address _token,\\n        address _pair,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getFNFTPriceETH(address _fnft, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    event PeriodUpdated(uint256 oldPeriod, uint256 newPeriod);\\n    event MinimumPairInfoUpdateUpdated(uint256 oldMinimumPairInfoUpdate, uint256 newMinimumPairInfoUpdate);\\n\\n    error InvalidToken();\\n    error NotEnoughUpdates();\\n    error PairInfoAlreadyExists();\\n    error PairInfoDoesNotExist();\\n}\\n\",\"keccak256\":\"0x1e4947bb1b352879a5661acf90d2a0229bf89964dd95ba6c57c890c112ffecbe\",\"license\":\"MIT\"},\"src/contracts/interfaces/IStakingTokenProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTokenProvider {\\n    function uniLikeExchange() external returns (address);\\n\\n    function defaultPairedToken() external returns (address);\\n\\n    function defaultPrefix() external returns (string memory);\\n\\n    function pairedToken(address) external returns (address);\\n\\n    function pairedPrefix(address) external returns (string memory);\\n\\n    function __StakingTokenProvider_init(address _uniLikeExchange, address _defaultPairedtoken, string memory _defaultPrefix) external;\\n\\n    function setPairedTokenForVaultToken(address _vaultToken, address _newPairedToken, string calldata _newPrefix) external;\\n\\n    function setDefaultPairedToken(address _defaultPairedToken, string calldata _defaultPrefix) external;\\n\\n    function stakingTokenForVaultToken(address _vaultToken) external view returns (address);\\n\\n    function nameForStakingToken(address _vaultToken) external view returns (string memory);\\n\\n    function pairForVaultToken(address _vaultToken, address _pairedToken) external view returns (address);\\n\\n    event DefaultPairedTokenUpdated(address oldDefaultPairedToken, address newDefaultPairedToken);\\n    event PairedTokenForVaultUpdated(address vaultToken, address oldPairedtoken, address newPairedToken);\\n\\n    error IdenticalAddress();\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x9e1fb1537606cdea4faf2baf748657800337b12d2586f1f83cc3d96cbaec17ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/ITimelockExcludeList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITimelockExcludeList {\\n    function isExcluded(address addr, uint256 vaultId) external view returns (bool);\\n}\",\"keccak256\":\"0xb908cf66c38d674f2970c91a15f5edb3c8b310261b0cd70f61f936feb02eab8d\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n}\\n\",\"keccak256\":\"0xbff8a2e20a5340751c23480b5f703f2a8af70fc2f8c8095862b89258295a9544\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n}\\n\",\"keccak256\":\"0x3b04b809645e0975ca14025904c43dc95655bda03e6685e6d10ee7d6950aa514\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVaultManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVaultManager {\\n    function fnftSingleFactory() external view returns (address);\\n\\n    function fnftCollectionFactory() external view returns (address);\\n\\n    function excludedFromFees(address) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function __VaultManager_init(\\n        address _weth,\\n        address _ifoFactory,\\n        address _priceOracle\\n    ) external;\\n\\n    function WETH() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function ifoFactory() external view returns (address);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function togglePaused() external;\\n\\n    function addVault(address _fnft) external returns (uint256 vaultId);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setFeeExclusion(address _address, bool _excluded) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFNFTCollectionFactory(address _fnftCollectionFactory) external;\\n\\n    function setFNFTSingleFactory(address _fnftCollectionFactory) external;\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function vaults(uint256) external view returns (address);\\n\\n    function numVaults() external view returns (uint);\\n\\n    event PriceOracleUpdated(address oldPriceOracle, address newPriceOracle);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event ZapContractUpdated(address oldZapContract, address newZapContract);\\n    event FNFTCollectionFactoryUpdated(address oldFNFTCollectionFactory, address newFNFTCollectionFactory);\\n    event FNFTSingleFactoryUpdated(address oldFNFTSingleFactory, address newFNFTSingleFactory);\\n    event VaultAdded(uint256 vaultId, address vault);\\n    event FeeDistributorUpdated(address oldFeeDistributor, address newFeeDistributor);\\n    event FeeExclusionUpdated(address target, bool excluded);\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MaxReserveFactorTooLow();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error OnlyFactory();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x627955435c64cfedd26e5ced55adf691870c03a95e5e962216cb7d8f6068efeb\",\"license\":\"MIT\"},\"src/contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x43b434c00d9d687556e827aa718563f12bd7a74a1732bfd833ddc54abf922384\",\"license\":\"MIT\"},\"src/contracts/libraries/PriceOracleLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./UQ112x112.sol\\\";\\nimport \\\"./math/FixedPoint.sol\\\";\\nimport \\\"./math/SafeMath.sol\\\";\\n\\nlibrary PriceOracleLibrary {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n        \\n        //if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp && reserve0 != 0 && reserve1 != 0) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(UQ112x112.encode(reserve1).uqdiv(reserve0)) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(UQ112x112.encode(reserve0).uqdiv(reserve1)) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f9bd91adf84ecb961a5b62748280d2ab92c11703f12c0f3972417885d1e4740\",\"license\":\"MIT\"},\"src/contracts/libraries/UQ112x112.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x8cd773695d730f37bebc3f721e638ae18855eb427a577d4de3f9c8f5646489fd\",\"license\":\"MIT\"},\"src/contracts/libraries/math/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1d203de39344d996ef88c66a47936767b7fef60058eb6e2180c91b7f93abe8\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n        r = 255;\\n        if (x & type(uint256).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1164085aeec4c45a594dc008d041b6c4fd496d6364bb303f0e65a79be091a855\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"FixedPoint::muli: overflow:\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= type(uint144).max) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xfbd1eac26ce29e109992b7b32db7b73e4a6f756205faf7fcb29359b4f6b351ea\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity 0.8.13;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (type(uint8).max - d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * (((type(uint8).max - pow2 + 1)) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xf5c057a505932a37882cac8417f65110a39381a4588ded1da4a3686eb1e77883\",\"license\":\"CC-BY-4.0\"},\"src/contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0xc5ebe7fd73c6481719f92f34eae482224b3da68b3d640a2b7b258043b664b2c8\",\"license\":\"MIT\"},\"src/contracts/token/ERC20FlashMintUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20FlashMint.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashLenderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC20FlashMintUpgradeable is Initializable, ERC20Upgradeable, IERC3156FlashLenderUpgradeable {\\n    function __ERC20FlashMint_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20FlashMint_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ON_RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    error ExceedsMaxFlashLoan();\\n    error FlashLoanNotRepaid();\\n    error InvalidFlashLoanReturnValue();\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token) public view virtual override returns (uint256) {\\n        return token == address(this) ? type(uint256).max - ERC20Upgradeable.totalSupply() : 0;\\n    }\\n\\n    function _flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) internal returns (bool) {\\n        if (amount > maxFlashLoan(token)) revert ExceedsMaxFlashLoan();\\n\\n        _mint(address(receiver), amount);\\n        if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != _ON_RETURN_VALUE) revert InvalidFlashLoanReturnValue();\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        if (amount + fee > currentAllowance) revert FlashLoanNotRepaid();\\n\\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\\n\\n        _burn(address(receiver), amount);\\n        _chargeAndDistributeFees(address(receiver), fee);\\n\\n        return true;\\n    }\\n\\n    function _chargeAndDistributeFees(address user, uint256 amount) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea8f4fd3607effd978dc28884710cf7a12e12952a99fc0a24c40f6be3e50b3c2\",\"license\":\"MIT\"},\"src/contracts/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x6ffb3595113d54827e8eca1b15cf843744a8d5865bb591ba974a7d978b9ea571\",\"license\":\"MIT\"},\"src/contracts/token/LPStakingXTokenUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title Reward-Paying Token (renamed from Dividend)\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract LPStakingXTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  IERC20Upgradeable public target;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 constant internal magnitude = 2**128;\\n\\n  uint256 internal magnifiedRewardPerShare;\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => int256) internal magnifiedRewardCorrections;\\n  mapping(address => uint256) internal withdrawnRewards;\\n\\n  mapping(address => uint256) internal timelock;\\n\\n  event Timelocked(address user, uint256 amount, uint256 until);\\n\\n  error UserIsLocked();\\n  error ZeroAmount();\\n  error ZeroSupply();\\n\\n  function __LPStakingXToken_init(IERC20Upgradeable _target, string memory _name, string memory _symbol) public initializer {\\n    __Ownable_init();\\n    __ERC20_init(_name, _symbol);\\n    target = _target;\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(_msgSender(), recipient, amount);\\n      return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\n    * required by the EIP. See the note at the beginning of {ERC20}.\\n    *\\n    * Requirements:\\n    *\\n    * - `sender` and `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    * - the caller must have allowance for ``sender``'s tokens of at least\\n    * `amount`.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount)\\n      public\\n      virtual\\n      override\\n      returns (bool)\\n  {\\n      _transfer(sender, recipient, amount);\\n      _approve(sender, _msgSender(), allowance(sender, _msgSender()) - amount);\\n      return true;\\n  }\\n\\n  function mint(address account, uint256 amount) public onlyOwner virtual {\\n      _mint(account, amount);\\n  }\\n\\n  function timelockMint(address account, uint256 amount, uint256 timelockLength) public onlyOwner virtual {\\n    uint256 timelockFinish = block.timestamp + timelockLength;\\n    timelock[account] = timelockFinish;\\n    emit Timelocked(account, amount, timelockFinish);\\n    _mint(account, amount);\\n  }\\n\\n  function timelockUntil(address account) public view returns (uint256) {\\n    return timelock[account];\\n  }\\n\\n  /**\\n    * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\\n    * allowance. Dangerous.\\n    *\\n    * See {ERC20-_burn} and {ERC20-allowance}.\\n    */\\n  function burnFrom(address account, uint256 amount) public virtual onlyOwner {\\n      _burn(account, amount);\\n  }\\n\\n  /// @notice Distributes target to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\\n  /// About undistributed target tokens:\\n  ///   In each distribution, there is a small amount of target not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(amount * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed target\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed target in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved target, so we don't do that.\\n  function distributeRewards(uint amount) external virtual onlyOwner {\\n    if (totalSupply() == 0) revert ZeroSupply();\\n    if (amount == 0) revert ZeroAmount();\\n\\n    // Because we receive the tokens from the staking contract, we assume the tokens have been received.\\n    magnifiedRewardPerShare = magnifiedRewardPerShare + (amount * magnitude / totalSupply());\\n\\n    emit RewardsDistributed(msg.sender, amount);\\n  }\\n\\n  /// @notice Withdraws the target distributed to the sender.\\n  /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\\n  function withdrawReward(address user) external onlyOwner {\\n    uint256 _withdrawableReward = withdrawableRewardOf(user);\\n    if (_withdrawableReward > 0) {\\n      withdrawnRewards[user] = withdrawnRewards[user] + _withdrawableReward;\\n      target.safeTransfer(user, _withdrawableReward);\\n      emit RewardWithdrawn(user, _withdrawableReward);\\n    }\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view returns(uint256) {\\n    return withdrawableRewardOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableRewardOf(address _owner) internal view returns(uint256) {\\n    return accumulativeRewardOf(_owner) - withdrawnRewards[_owner];\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnRewardOf(address _owner) public view returns(uint256) {\\n    return withdrawnRewards[_owner];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\\n  /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeRewardOf(address _owner) public view returns(uint256) {\\n    return ((magnifiedRewardPerShare * balanceOf(_owner)).toInt256() + magnifiedRewardCorrections[_owner]).toUint256() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(address from, address to, uint256 value) internal override {\\n    if (timelock[from] >= block.timestamp) revert UserIsLocked();\\n    super._transfer(from, to, value);\\n\\n    int256 _magCorrection = (magnifiedRewardPerShare * value).toInt256();\\n    magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from] + _magCorrection;\\n    magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to] - _magCorrection;\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] - (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    if (timelock[account] >= block.timestamp) revert UserIsLocked();\\n    super._burn(account, value);\\n\\n    magnifiedRewardCorrections[account] = magnifiedRewardCorrections[account] + (magnifiedRewardPerShare * value).toInt256();\\n  }\\n\\n\\n  /// @dev This event MUST emit when target is distributed to token holders.\\n  /// @param from The address which sends target to this contract.\\n  /// @param weiAmount The amount of distributed target in wei.\\n  event RewardsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws target from this contract.\\n  /// @param weiAmount The amount of withdrawn target in wei.\\n  event RewardWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\",\"keccak256\":\"0xb1c86212e64708255110a346342716f0abd0f7a1b9713bc8b3f295a73b0c062d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061437f806100206000396000f3fe6080604052600436106103815760003560e01c80638da5cb5b116101d1578063c45a015511610102578063e0a8b97a116100a0578063efbe1c1c1161006f578063efbe1c1c146109c5578063f2fde38b146109da578063f70a0938146109fa578063fc0c546a14610a0f57600080fd5b8063e0a8b97a1461094e578063e66f53b71461096e578063e6fd29821461098e578063e90956cf146109a557600080fd5b8063d1493b28116100dc578063d1493b28146108cc578063d9d98ce4146108f9578063db2e1eed14610919578063dd62ed3e1461092e57600080fd5b8063c45a015514610880578063caf787f2146108a0578063ce525a75146108b557600080fd5b8063adc1b9561161016f578063bbb82d8911610149578063bbb82d891461082c578063be040fb01461084e578063be9a655514610863578063c26c12eb1461086b57600080fd5b8063adc1b956146107e0578063b579605b146107f7578063b76b720e1461081757600080fd5b80639a4e6d34116101ab5780639a4e6d3414610764578063a457c2d71461077b578063a8aa1b311461079b578063a9059cbb146107c057600080fd5b80638da5cb5b1461071c57806395d89b411461073a578063961be3911461074f57600080fd5b8063416429f1116102b657806370a082311161025457806380436fe01161022357806380436fe014610683578063853a1b90146106a357806386a777ab146106dc5780638a4adf24146106fc57600080fd5b806370a08231146105fa578063715018a6146106305780637b5581ed146106455780637fb450991461065c57600080fd5b8063613255ab11610290578063613255ab1461058357806369fe0e2d146105a35780636a775714146105c35780636da84e6c146105e357600080fd5b8063416429f1146105465780634bd25c6f1461054e5780635cffe9de1461056357600080fd5b806323b872dd11610323578063313ce567116102fd578063313ce567146104dc578063325c25a2146104f857806333194c0a1461050f578063395093511461052657600080fd5b806323b872dd146104855780632a24f46c146104a55780632a44f120146104bc57600080fd5b8063150b7a021161035f578063150b7a02146103fd57806317d70f7c1461044157806318160ddd146104665780631998aeef1461047b57600080fd5b806301ffc9a71461038657806306fdde03146103bb578063095ea7b3146103dd575b600080fd5b34801561039257600080fd5b506103a66103a1366004613bf1565b610a30565b60405190151581526020015b60405180910390f35b3480156103c757600080fd5b506103d0610a67565b6040516103b29190613c1b565b3480156103e957600080fd5b506103a66103f8366004613c85565b610af9565b34801561040957600080fd5b50610428610418366004613d3d565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103b2565b34801561044d57600080fd5b506104586101055481565b6040519081526020016103b2565b34801561047257600080fd5b50606754610458565b610483610b11565b005b34801561049157600080fd5b506103a66104a0366004613dbd565b610ccd565b3480156104b157600080fd5b506104586101025481565b3480156104c857600080fd5b506104836104d7366004613dfe565b610cf1565b3480156104e857600080fd5b50604051601281526020016103b2565b34801561050457600080fd5b506104586101035481565b34801561051b57600080fd5b5061045861010a5481565b34801561053257600080fd5b506103a6610541366004613c85565b610dae565b610483610ded565b34801561055a57600080fd5b50610458610ffe565b34801561056f57600080fd5b506103a661057e366004613e64565b61100d565b34801561058f57600080fd5b5061045861059e366004613dfe565b6110b9565b3480156105af57600080fd5b506104836105be366004613ed7565b6110e1565b3480156105cf57600080fd5b506104836105de366004613ed7565b6111e8565b3480156105ef57600080fd5b506104586101085481565b34801561060657600080fd5b50610458610615366004613dfe565b6001600160a01b031660009081526065602052604090205490565b34801561063c57600080fd5b50610483611437565b34801561065157600080fd5b506104586101095481565b34801561066857600080fd5b5060fc546106769060ff1681565b6040516103b29190613f06565b34801561068f57600080fd5b5061048361069e366004613dfe565b61146d565b3480156106af57600080fd5b50610101546106c4906001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b3480156106e857600080fd5b506104836106f7366004613f4e565b6115a7565b34801561070857600080fd5b5060fd546106c4906001600160a01b031681565b34801561072857600080fd5b506033546001600160a01b03166106c4565b34801561074657600080fd5b506103d0611962565b34801561075b57600080fd5b50610483611971565b34801561077057600080fd5b5061045861010b5481565b34801561078757600080fd5b506103a6610796366004613c85565b611a51565b3480156107a757600080fd5b5060fc546106c49061010090046001600160a01b031681565b3480156107cc57600080fd5b506103a66107db366004613c85565b611ae3565b3480156107ec57600080fd5b506104586101075481565b34801561080357600080fd5b50610483610812366004613ed7565b611af1565b34801561082357600080fd5b50610483611c46565b34801561083857600080fd5b50610101546103a690600160a01b900460ff1681565b34801561085a57600080fd5b50610483611c58565b610483611d55565b34801561087757600080fd5b50610458611e39565b34801561088c57600080fd5b5060fe546106c4906001600160a01b031681565b3480156108ac57600080fd5b50610483611e43565b3480156108c157600080fd5b506104586101045481565b3480156108d857600080fd5b506104586108e7366004613dfe565b60fb6020526000908152604090205481565b34801561090557600080fd5b50610458610914366004613c85565b611ebe565b34801561092557600080fd5b50610458611f7f565b34801561093a57600080fd5b50610458610949366004613ffb565b611fa4565b34801561095a57600080fd5b50610483610969366004614034565b611fcf565b34801561097a57600080fd5b5060ff546106c4906001600160a01b031681565b34801561099a57600080fd5b506104586101065481565b3480156109b157600080fd5b506104836109c0366004613dfe565b612050565b3480156109d157600080fd5b506104836120e2565b3480156109e657600080fd5b506104836109f5366004613dfe565b61221a565b348015610a0657600080fd5b506104586122b5565b348015610a1b57600080fd5b50610100546106c4906001600160a01b031681565b60006001600160e01b03198216632db6e07160e21b1480610a6157506001600160e01b031982166301ffc9a760e01b145b92915050565b606060688054610a76906140a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa2906140a0565b8015610aef5780601f10610ac457610100808354040283529160200191610aef565b820191906000526020600020905b815481529060010190602001808311610ad257829003601f168201915b5050505050905090565b600033610b0781858561234c565b5060019392505050565b610b1b6004612470565b600160fc5460ff166003811115610b3457610b34613ef0565b14610b52576040516358fd8d1160e01b815260040160405180910390fd5b60fe5460408051637c513c0f60e01b815290516000926001600160a01b031691637c513c0f9160048083019260209291908290030181865afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc091906140da565b610bcc90612710614109565b90508061010854610bdd9190614121565b610be934612710614121565b1015610c0857604051635069375b60e11b815260040160405180910390fd5b610102544210610c2b5760405163283a4a6160e21b815260040160405180910390fd5b6103844261010254610c3d9190614140565b11610c5d576103846101026000828254610c579190614109565b90915550505b6101015461010854610c78916001600160a01b031690612511565b3461010881905561010180546001600160a01b03191633908117909155604051918252907ff656495f96f16470da4a66d53837918bf922ec6c93e4bd9d393463fd535987f4906020015b60405180910390a250565b600033610cdb85828561265b565b610ce68585856126cf565b506001949350505050565b6033546001600160a01b03163314610d245760405162461bcd60e51b8152600401610d1b90614157565b60405180910390fd5b60ff546001600160a01b03808316911603610d5257604051635e39359760e01b815260040160405180910390fd5b60ff546040516001600160a01b038084169216907f742c208dc7291d402fbf5e5dbb8774ad7f5d0bc924fc32f148277bedbf08c73190600090a360ff80546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190610b079082908690610de8908790614109565b61234c565b610df76003612470565b600060fc5460ff166003811115610e1057610e10613ef0565b14610e2e57604051631c2ce4fd60e01b815260040160405180910390fd5b6000610e386122b5565b905080600003610e5b57604051636dddf41160e11b815260040160405180910390fd5b80341015610e7c57604051632c1d501360e11b815260040160405180910390fd5b610e846128ae565b60fd60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb919061418c565b6001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505061010054610105546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b0390911693506323b872dd92506064019050600060405180830381600087803b158015610fa757600080fd5b505af1158015610fbb573d6000803e3d6000fd5b505060fc805460ff19166002179055505060405181815233907fa7f57fa38c1f675856eb8c2460c87aa01ecd63c51d4c817d4389cd5789ccc44b90602001610cc2565b6000611008612b2d565b905090565b60006110196005612470565b60fd546040516306df336560e51b81526001600160a01b038881166004830152600092169063dbe66ca090602401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906141a9565b61109b576110968686611ebe565b61109e565b60005b90506110ae878787848888612dd0565b979650505050505050565b60006001600160a01b03821630146110d2576000610a61565b606754610a6190600019614140565b6110e9612f32565b61010454811061110c5760405163309f796760e21b815260040160405180910390fd5b60fe60009054906101000a90046001600160a01b03166001600160a01b0316638a364bc16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118391906140da565b8111156111a35760405163cd4e616760e01b815260040160405180910390fd5b6111ab6128ae565b6101048190556040518181527f6d69e3b0ce68b50a3e467e01c3d62795f90673a3caded8ccf93f44c4832187f0906020015b60405180910390a150565b6111f26007612470565b600060fc5460ff16600381111561120b5761120b613ef0565b1461122957604051631c2ce4fd60e01b815260040160405180910390fd5b33600090815260fb602052604090205480820361125957604051630b5571c160e11b815260040160405180910390fd5b3360009081526065602052604081205461010b5490910361129a576112816101065484612f98565b61010b8190556112918382614121565b610109556113e6565b61010b54811480156112ab57508115155b156112c4576112ba8284612f98565b6112918382614121565b8160000361132d57600061010b54610109546112e091906141cb565b90506112ec8185612f98565b8161010b60008282546112ff9190614109565b9091555061130f90508483614121565b61010960008282546113219190614109565b909155506113e6915050565b82600003611375578061010b60008282546113489190614140565b9091555061135890508282614121565b610109600082825461136a9190614140565b909155506113e69050565b60008161010b546113869190614140565b6113908385614121565b6101095461139e9190614140565b6113a891906141cb565b90506113b48185612f98565b6113be8383614121565b6113c88584614121565b610109546113d69190614109565b6113e09190614140565b61010955505b33600081815260fb602052604090819020859055517f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b849061142a9086815260200190565b60405180910390a2505050565b6033546001600160a01b031633146114615760405162461bcd60e51b8152600401610d1b90614157565b61146b60006130fe565b565b6033546001600160a01b031633146114975760405162461bcd60e51b8152600401610d1b90614157565b600060fc5460ff1660038111156114b0576114b0613ef0565b146114ce57604051631c2ce4fd60e01b815260040160405180910390fd5b6001600160a01b038116600090815260fb60205260408120549081900361150857604051630b5571c160e11b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604081205490508061010b60008282546115369190614140565b9091555061154690508282614121565b61010960008282546115589190614140565b90915550506001600160a01b038316600081815260fb60209081526040808320839055519182527f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84910161142a565b60006115b36001613150565b905080156115cb576000805461ff0019166101001790555b6001600160a01b0387166115f25760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0386166116195760405163d92e233d60e01b815260040160405180910390fd5b6116216131dd565b61162b898961320c565b61163361323d565b60003390506000816001600160a01b0316638a4adf246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169c919061418c565b9050816001600160a01b0316638a364bc16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170091906140da565b8411156117205760405163cd4e616760e01b815260040160405180910390fd5b60fe80546001600160a01b038085166001600160a01b03199283161790925560fd805484841690831681179091556101008054938c1693909216929092179055604080516304c94c4160e31b8152905163264a6208916004808201926020929091908290030181865afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf91906140da565b61010a556101058790556203f4806101035560ff80546001600160a01b0319166001600160a01b038b81169182179092556101048690554261010755600090815260fb60209081526040918290208890556101068890558151632630c12f60e01b8152915192841692632630c12f9260048181019392918290030181865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611873919061418c565b6040516394b26a1b60e01b81523060048201526001600160a01b0391909116906394b26a1b906024016020604051808303816000875af11580156118bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118df919061418c565b60fc60016101000a8154816001600160a01b0302191690836001600160a01b0316021790555061190f8987613264565b50508015611957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b606060698054610a76906140a0565b61197b6004612470565b600260fc5460ff16600381111561199457611994613ef0565b146119b257604051636463738960e01b815260040160405180910390fd5b33600090815260656020526040812054908190036119e35760405163df95788360e01b815260040160405180910390fd5b60006119ee60675490565b6119f84784614121565b611a0291906141cb565b9050611a0e3383613357565b611a183382612511565b60405181815233907f1d63055f2391fc3a61f120d9da75cb686b1384a1a477aafb6bc7cbbceca233599060200160405180910390a25050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015611ad65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d1b565b610ce6828686840361234c565b600033610b078185856126cf565b611af9612f32565b60fe60009054906101000a90046001600160a01b03166001600160a01b031663a0b335e36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7091906140da565b811080611bf2575060fe60009054906101000a90046001600160a01b03166001600160a01b0316630e519ef96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef91906140da565b81115b15611c10576040516321029bc560e11b815260040160405180910390fd5b6101038190556040518181527f26d6292d6fb0e786778ddcd15ee4e4ee219a7b892d1bf667e1c497c85bbcddcb906020016111dd565b611c506006612470565b61146b6128ae565b611c626002612470565b600060fc5460ff166003811115611c7b57611c7b613ef0565b14611c9957604051631c2ce4fd60e01b815260040160405180910390fd5b611cab33611ca660675490565b613357565b61010054610105546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611d0357600080fd5b505af1158015611d17573d6000803e3d6000fd5b505060fc805460ff19166003179055505060405133907f50e4d08b22725f7499f6c76e6e202566b690bb1eba93836a6bacea781f8f783d90600090a2565b611d5f6004612470565b600060fc5460ff166003811115611d7857611d78613ef0565b14611d9657604051631c2ce4fd60e01b815260040160405180910390fd5b6000611da0612b2d565b9050801580611dae57508034105b15611dcc57604051635069375b60e11b815260040160405180910390fd5b61010354611dda9042614109565b6101025560fc805460ff191660011790553461010881905561010180546001600160a01b03191633908117909155604051918252907fc087c4cdb16906b5ff7016a6bf927618f24ff32eb1de5e86eeaeb08b94831a6890602001610cc2565b60006110086134bd565b6033546001600160a01b03163314611e6d5760405162461bcd60e51b8152600401610d1b90614157565b610101805460ff60a01b198116600160a01b9182900460ff1615918202179091556040518181527f31f0cd2056cb14961826087872d64b913fa6118127d4fceade8a9cfe80cce5f5906020016111dd565b60006001600160a01b0383163014611ee95760405163c1ab6dc160e01b815260040160405180910390fd5b6127108260fe60009054906101000a90046001600160a01b03166001600160a01b0316634847cdc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6491906140da565b611f6e9190614121565b611f7891906141cb565b9392505050565b600061010b54600014611f9e5761010b546101095461100891906141cb565b50600090565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b611fd7612f32565b61204a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152925086915085908190840183828082843760009201919091525061372192505050565b50505050565b612058612f32565b60ff546001600160a01b0380831691160361208657604051635e39359760e01b815260040160405180910390fd5b60ff546040516001600160a01b038084169216907fbc21df13ae8a32d7d89d87c70c0d02240cd4fb9554c57522bbbf6f27bfc2dacd90600090a360ff80546001600160a01b0319166001600160a01b0392909216919091179055565b6120ec6004612470565b600160fc5460ff16600381111561210557612105613ef0565b14612123576040516358fd8d1160e01b815260040160405180910390fd5b6101025442101561214757604051636463738960e01b815260040160405180910390fd5b61214f6128ae565b6101005461010154610105546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b1580156121ac57600080fd5b505af11580156121c0573d6000803e3d6000fd5b505060fc805460ff19166002179055505061010154610108546040519081526001600160a01b03909116907fa7f57fa38c1f675856eb8c2460c87aa01ecd63c51d4c817d4389cd5789ccc44b9060200160405180910390a2565b6033546001600160a01b031633146122445760405162461bcd60e51b8152600401610d1b90614157565b6001600160a01b0381166122a95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d1b565b6122b2816130fe565b50565b6000600a60fe60009054906101000a90046001600160a01b03166001600160a01b031663e2386a556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233091906140da565b612338612b2d565b6123429190614121565b61100891906141cb565b6001600160a01b0383166123ae5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d1b565b6001600160a01b03821661240f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d1b565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6033546001600160a01b031633148015906124f3575060fe54604051632f7ca90f60e21b8152600481018390526001600160a01b039091169063bdf2a43c90602401602060405180830381865afa1580156124cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f391906141a9565b156122b2576040516313d0ff5960e31b815260040160405180910390fd5b61251b8282613748565b6126575760fd54604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015612569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258d919061418c565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125ca57600080fd5b505af11580156125de573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018790528516935063a9059cbb925060440190506020604051808303816000875af1158015612633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204a91906141a9565b5050565b60006126678484611fa4565b9050600019811461204a57818110156126c25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d1b565b61204a848484840361234c565b6001600160a01b0383166127335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d1b565b6001600160a01b0382166127955760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d1b565b6127a08383836137ab565b6001600160a01b038316600090815260656020526040902054818110156128185760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d1b565b6001600160a01b0380851660009081526065602052604080822085850390559185168152908120805484929061284f908490614109565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161289b91815260200190565b60405180910390a361204a8484846138b0565b600260fc5460ff1660038111156128c7576128c7613ef0565b036128e55760405163283a4a6160e21b815260040160405180910390fd5b60006127106128f360675490565b610104546129019190614121565b61290b91906141cb565b9050600061291d6301e13380836141cb565b9050600061010754426129309190614140565b9050600061293e8383614121565b9050600060fd60009054906101000a90046001600160a01b03166001600160a01b031663b3f006746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b9919061418c565b9050600060fe60009054906101000a90046001600160a01b03166001600160a01b0316630ea90a126040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3491906140da565b9050612710612a4260675490565b612a4c9083614121565b612a5691906141cb565b9550612a666301e13380876141cb565b94506000612a748686614121565b426101075560ff549091506001600160a01b031615612ad75760ff54612aa3906001600160a01b031685613264565b6040518481527f1e0cd0975cff39cd66cb9c3e27bed07e184c573eca2148dee12e741e43df59da9060200160405180910390a15b6001600160a01b03831615612b2457612af08382613264565b6040518181527f1e0cd0975cff39cd66cb9c3e27bed07e184c573eca2148dee12e741e43df59da9060200160405180910390a15b50505050505050565b60008060fd60009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba7919061418c565b9050600060fe60009054906101000a90046001600160a01b03166001600160a01b03166332977c736040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2291906140da565b612c2a6134bd565b1190506000612c37611f7f565b90506001600160a01b03831615612db857600060fc60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc19190614204565b506001600160701b0316915050600060fe60009054906101000a90046001600160a01b03166001600160a01b031663c96880866040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4791906140da565b612d52836002614121565b1190508015612d9a576000612d6561398e565b90508415612d8757838111612d7a5783612d7c565b805b965050505050505090565b610106548111612d7a5761010654612d7c565b8315612daa575090949350505050565b610106549550505050505090565b81612dc65761010654612dc8565b805b935050505090565b6000612ddb866110b9565b851115612dfb57604051634b29c39b60e11b815260040160405180910390fd5b612e058786613264565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b90612e5d9033908b908b908b908b908b90600401614254565b6020604051808303816000875af1158015612e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea091906140da565b14612ebe57604051637679356b60e01b815260040160405180910390fd5b6000612eca8830611fa4565b905080612ed78688614109565b1115612ef657604051633fe269db60e11b815260040160405180910390fd5b612f10883087612f068a86614140565b610de89190614140565b612f1a8887613357565b612f248886613a83565b506001979650505050505050565b60ff546001600160a01b0316612f6d576033546001600160a01b0316331461146b576040516330cd747160e01b815260040160405180910390fd5b60ff546001600160a01b0316331461146b576040516356b381a560e01b815260040160405180910390fd5b600061271060fe60009054906101000a90046001600160a01b03166001600160a01b03166309990a966040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301491906140da565b61301e9085614121565b61302891906141cb565b90508082101561304b57604051636dddf41160e11b815260040160405180910390fd5b600061271060fe60009054906101000a90046001600160a01b03166001600160a01b0316635410bfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c791906140da565b6130d19086614121565b6130db91906141cb565b90508083111561204a5760405163127f08c960e11b815260040160405180910390fd5b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615613197578160ff1660011480156131735750303b155b61318f5760405162461bcd60e51b8152600401610d1b906142b0565b506000919050565b60005460ff8084169116106131be5760405162461bcd60e51b8152600401610d1b906142b0565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132045760405162461bcd60e51b8152600401610d1b906142fe565b61146b613b0a565b600054610100900460ff166132335760405162461bcd60e51b8152600401610d1b906142fe565b6126578282613b3a565b600054610100900460ff1661146b5760405162461bcd60e51b8152600401610d1b906142fe565b6001600160a01b0382166132ba5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d1b565b6132c6600083836137ab565b80606760008282546132d89190614109565b90915550506001600160a01b03821660009081526065602052604081208054839290613305908490614109565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3612657600083836138b0565b6001600160a01b0382166133b75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d1b565b6133c3826000836137ab565b6001600160a01b038216600090815260656020526040902054818110156134375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d1b565b6001600160a01b0383166000908152606560205260408120838303905560678054849290613466908490614140565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36134b8836000846138b0565b505050565b60008060fd60009054906101000a90046001600160a01b03166001600160a01b0316631ca683a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613537919061418c565b604051633154782f60e01b81523060048201526001600160a01b039190911690633154782f90602401602060405180830381865afa15801561357d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a1919061418c565b90506001600160a01b038116158015906136185750806001600160a01b03166312fa6feb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361891906141a9565b80156136815750806001600160a01b0316636727b0da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561365d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368191906141a9565b1561371557806001600160a01b031663ca5c7b916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e891906140da565b6067546136f59190614140565b61010b5461370590612710614121565b61370f91906141cb565b91505090565b6067546136f5565b5090565b8151613734906068906020850190613b61565b5080516134b8906069906020840190613b61565b600080836001600160a01b03168361753090604051600060405180830381858888f193505050503d806000811461379b576040519150601f19603f3d011682016040523d82523d6000602084013e6137a0565b606091505b509095945050505050565b600060fc5460ff1660038111156137c4576137c4613ef0565b036134b8576001600160a01b03808416600090815260fb60205260408082205492851682529020548082146138a9578060000361383b578261010b600082825461380e9190614140565b9091555061381e90508284614121565b61010960008282546138309190614140565b909155506138a99050565b81600003613878578261010b60008282546138569190614109565b9091555061386690508184614121565b61010960008282546138309190614109565b6138828284614121565b61388c8285614121565b6101095461389a9190614109565b6138a49190614140565b610109555b5050505050565b60fd5460408051632630c12f60e01b815290516000926001600160a01b031691632630c12f9160048083019260209291908290030181865afa1580156138fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391e919061418c565b90506001600160a01b0381161561204a57604051636f0f4fdf60e01b81523060048201526001600160a01b03821690636f0f4fdf90602401600060405180830381600087803b15801561397057600080fd5b505af1158015613984573d6000803e3d6000fd5b5050505050505050565b60fd5460408051632630c12f60e01b815290516000926001600160a01b031691632630c12f9160048083019260209291908290030181865afa1580156139d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139fc919061418c565b6001600160a01b031663a0cbb06230613a1460675490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa925050508015613a79575060408051601f3d908101601f19168201909252613a76918101906140da565b60015b6131d85750600090565b80600003613a8f575050565b60fd5460408051630d43e8ad60e01b815290516000926001600160a01b031691630d43e8ad9160048083019260209291908290030181865afa158015613ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afd919061418c565b90506134b88382846126cf565b600054610100900460ff16613b315760405162461bcd60e51b8152600401610d1b906142fe565b61146b336130fe565b600054610100900460ff166137215760405162461bcd60e51b8152600401610d1b906142fe565b828054613b6d906140a0565b90600052602060002090601f016020900481019282613b8f5760008555613bd5565b82601f10613ba857805160ff1916838001178555613bd5565b82800160010185558215613bd5579182015b82811115613bd5578251825591602001919060010190613bba565b5061371d9291505b8082111561371d5760008155600101613bdd565b600060208284031215613c0357600080fd5b81356001600160e01b031981168114611f7857600080fd5b600060208083528351808285015260005b81811015613c4857858101830151858201604001528201613c2c565b81811115613c5a576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146122b257600080fd5b60008060408385031215613c9857600080fd5b8235613ca381613c70565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613ce257613ce2613cb1565b604051601f8501601f19908116603f01168101908282118183101715613d0a57613d0a613cb1565b81604052809350858152868686011115613d2357600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613d5357600080fd5b8435613d5e81613c70565b93506020850135613d6e81613c70565b925060408501359150606085013567ffffffffffffffff811115613d9157600080fd5b8501601f81018713613da257600080fd5b613db187823560208401613cc7565b91505092959194509250565b600080600060608486031215613dd257600080fd5b8335613ddd81613c70565b92506020840135613ded81613c70565b929592945050506040919091013590565b600060208284031215613e1057600080fd5b8135611f7881613c70565b60008083601f840112613e2d57600080fd5b50813567ffffffffffffffff811115613e4557600080fd5b602083019150836020828501011115613e5d57600080fd5b9250929050565b600080600080600060808688031215613e7c57600080fd5b8535613e8781613c70565b94506020860135613e9781613c70565b935060408601359250606086013567ffffffffffffffff811115613eba57600080fd5b613ec688828901613e1b565b969995985093965092949392505050565b600060208284031215613ee957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160048310613f2857634e487b7160e01b600052602160045260246000fd5b91905290565b600082601f830112613f3f57600080fd5b611f7883833560208501613cc7565b600080600080600080600080610100898b031215613f6b57600080fd5b883567ffffffffffffffff80821115613f8357600080fd5b613f8f8c838d01613f2e565b995060208b0135915080821115613fa557600080fd5b50613fb28b828c01613f2e565b9750506040890135613fc381613c70565b95506060890135613fd381613c70565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806040838503121561400e57600080fd5b823561401981613c70565b9150602083013561402981613c70565b809150509250929050565b6000806000806040858703121561404a57600080fd5b843567ffffffffffffffff8082111561406257600080fd5b61406e88838901613e1b565b9096509450602087013591508082111561408757600080fd5b5061409487828801613e1b565b95989497509550505050565b600181811c908216806140b457607f821691505b6020821081036140d457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156140ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561411c5761411c6140f3565b500190565b600081600019048311821515161561413b5761413b6140f3565b500290565b600082821015614152576141526140f3565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561419e57600080fd5b8151611f7881613c70565b6000602082840312156141bb57600080fd5b81518015158114611f7857600080fd5b6000826141e857634e487b7160e01b600052601260045260246000fd5b500490565b80516001600160701b03811681146131d857600080fd5b60008060006060848603121561421957600080fd5b614222846141ed565b9250614230602085016141ed565b9150604084015163ffffffff8116811461424957600080fd5b809150509250925092565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ecaf4c8c527f958ab4dc8711d00db458a6da9f0479e38e2f6a4c4573f2ce1c8664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c80638da5cb5b116101d1578063c45a015511610102578063e0a8b97a116100a0578063efbe1c1c1161006f578063efbe1c1c146109c5578063f2fde38b146109da578063f70a0938146109fa578063fc0c546a14610a0f57600080fd5b8063e0a8b97a1461094e578063e66f53b71461096e578063e6fd29821461098e578063e90956cf146109a557600080fd5b8063d1493b28116100dc578063d1493b28146108cc578063d9d98ce4146108f9578063db2e1eed14610919578063dd62ed3e1461092e57600080fd5b8063c45a015514610880578063caf787f2146108a0578063ce525a75146108b557600080fd5b8063adc1b9561161016f578063bbb82d8911610149578063bbb82d891461082c578063be040fb01461084e578063be9a655514610863578063c26c12eb1461086b57600080fd5b8063adc1b956146107e0578063b579605b146107f7578063b76b720e1461081757600080fd5b80639a4e6d34116101ab5780639a4e6d3414610764578063a457c2d71461077b578063a8aa1b311461079b578063a9059cbb146107c057600080fd5b80638da5cb5b1461071c57806395d89b411461073a578063961be3911461074f57600080fd5b8063416429f1116102b657806370a082311161025457806380436fe01161022357806380436fe014610683578063853a1b90146106a357806386a777ab146106dc5780638a4adf24146106fc57600080fd5b806370a08231146105fa578063715018a6146106305780637b5581ed146106455780637fb450991461065c57600080fd5b8063613255ab11610290578063613255ab1461058357806369fe0e2d146105a35780636a775714146105c35780636da84e6c146105e357600080fd5b8063416429f1146105465780634bd25c6f1461054e5780635cffe9de1461056357600080fd5b806323b872dd11610323578063313ce567116102fd578063313ce567146104dc578063325c25a2146104f857806333194c0a1461050f578063395093511461052657600080fd5b806323b872dd146104855780632a24f46c146104a55780632a44f120146104bc57600080fd5b8063150b7a021161035f578063150b7a02146103fd57806317d70f7c1461044157806318160ddd146104665780631998aeef1461047b57600080fd5b806301ffc9a71461038657806306fdde03146103bb578063095ea7b3146103dd575b600080fd5b34801561039257600080fd5b506103a66103a1366004613bf1565b610a30565b60405190151581526020015b60405180910390f35b3480156103c757600080fd5b506103d0610a67565b6040516103b29190613c1b565b3480156103e957600080fd5b506103a66103f8366004613c85565b610af9565b34801561040957600080fd5b50610428610418366004613d3d565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103b2565b34801561044d57600080fd5b506104586101055481565b6040519081526020016103b2565b34801561047257600080fd5b50606754610458565b610483610b11565b005b34801561049157600080fd5b506103a66104a0366004613dbd565b610ccd565b3480156104b157600080fd5b506104586101025481565b3480156104c857600080fd5b506104836104d7366004613dfe565b610cf1565b3480156104e857600080fd5b50604051601281526020016103b2565b34801561050457600080fd5b506104586101035481565b34801561051b57600080fd5b5061045861010a5481565b34801561053257600080fd5b506103a6610541366004613c85565b610dae565b610483610ded565b34801561055a57600080fd5b50610458610ffe565b34801561056f57600080fd5b506103a661057e366004613e64565b61100d565b34801561058f57600080fd5b5061045861059e366004613dfe565b6110b9565b3480156105af57600080fd5b506104836105be366004613ed7565b6110e1565b3480156105cf57600080fd5b506104836105de366004613ed7565b6111e8565b3480156105ef57600080fd5b506104586101085481565b34801561060657600080fd5b50610458610615366004613dfe565b6001600160a01b031660009081526065602052604090205490565b34801561063c57600080fd5b50610483611437565b34801561065157600080fd5b506104586101095481565b34801561066857600080fd5b5060fc546106769060ff1681565b6040516103b29190613f06565b34801561068f57600080fd5b5061048361069e366004613dfe565b61146d565b3480156106af57600080fd5b50610101546106c4906001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b3480156106e857600080fd5b506104836106f7366004613f4e565b6115a7565b34801561070857600080fd5b5060fd546106c4906001600160a01b031681565b34801561072857600080fd5b506033546001600160a01b03166106c4565b34801561074657600080fd5b506103d0611962565b34801561075b57600080fd5b50610483611971565b34801561077057600080fd5b5061045861010b5481565b34801561078757600080fd5b506103a6610796366004613c85565b611a51565b3480156107a757600080fd5b5060fc546106c49061010090046001600160a01b031681565b3480156107cc57600080fd5b506103a66107db366004613c85565b611ae3565b3480156107ec57600080fd5b506104586101075481565b34801561080357600080fd5b50610483610812366004613ed7565b611af1565b34801561082357600080fd5b50610483611c46565b34801561083857600080fd5b50610101546103a690600160a01b900460ff1681565b34801561085a57600080fd5b50610483611c58565b610483611d55565b34801561087757600080fd5b50610458611e39565b34801561088c57600080fd5b5060fe546106c4906001600160a01b031681565b3480156108ac57600080fd5b50610483611e43565b3480156108c157600080fd5b506104586101045481565b3480156108d857600080fd5b506104586108e7366004613dfe565b60fb6020526000908152604090205481565b34801561090557600080fd5b50610458610914366004613c85565b611ebe565b34801561092557600080fd5b50610458611f7f565b34801561093a57600080fd5b50610458610949366004613ffb565b611fa4565b34801561095a57600080fd5b50610483610969366004614034565b611fcf565b34801561097a57600080fd5b5060ff546106c4906001600160a01b031681565b34801561099a57600080fd5b506104586101065481565b3480156109b157600080fd5b506104836109c0366004613dfe565b612050565b3480156109d157600080fd5b506104836120e2565b3480156109e657600080fd5b506104836109f5366004613dfe565b61221a565b348015610a0657600080fd5b506104586122b5565b348015610a1b57600080fd5b50610100546106c4906001600160a01b031681565b60006001600160e01b03198216632db6e07160e21b1480610a6157506001600160e01b031982166301ffc9a760e01b145b92915050565b606060688054610a76906140a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa2906140a0565b8015610aef5780601f10610ac457610100808354040283529160200191610aef565b820191906000526020600020905b815481529060010190602001808311610ad257829003601f168201915b5050505050905090565b600033610b0781858561234c565b5060019392505050565b610b1b6004612470565b600160fc5460ff166003811115610b3457610b34613ef0565b14610b52576040516358fd8d1160e01b815260040160405180910390fd5b60fe5460408051637c513c0f60e01b815290516000926001600160a01b031691637c513c0f9160048083019260209291908290030181865afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc091906140da565b610bcc90612710614109565b90508061010854610bdd9190614121565b610be934612710614121565b1015610c0857604051635069375b60e11b815260040160405180910390fd5b610102544210610c2b5760405163283a4a6160e21b815260040160405180910390fd5b6103844261010254610c3d9190614140565b11610c5d576103846101026000828254610c579190614109565b90915550505b6101015461010854610c78916001600160a01b031690612511565b3461010881905561010180546001600160a01b03191633908117909155604051918252907ff656495f96f16470da4a66d53837918bf922ec6c93e4bd9d393463fd535987f4906020015b60405180910390a250565b600033610cdb85828561265b565b610ce68585856126cf565b506001949350505050565b6033546001600160a01b03163314610d245760405162461bcd60e51b8152600401610d1b90614157565b60405180910390fd5b60ff546001600160a01b03808316911603610d5257604051635e39359760e01b815260040160405180910390fd5b60ff546040516001600160a01b038084169216907f742c208dc7291d402fbf5e5dbb8774ad7f5d0bc924fc32f148277bedbf08c73190600090a360ff80546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190610b079082908690610de8908790614109565b61234c565b610df76003612470565b600060fc5460ff166003811115610e1057610e10613ef0565b14610e2e57604051631c2ce4fd60e01b815260040160405180910390fd5b6000610e386122b5565b905080600003610e5b57604051636dddf41160e11b815260040160405180910390fd5b80341015610e7c57604051632c1d501360e11b815260040160405180910390fd5b610e846128ae565b60fd60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb919061418c565b6001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505061010054610105546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b0390911693506323b872dd92506064019050600060405180830381600087803b158015610fa757600080fd5b505af1158015610fbb573d6000803e3d6000fd5b505060fc805460ff19166002179055505060405181815233907fa7f57fa38c1f675856eb8c2460c87aa01ecd63c51d4c817d4389cd5789ccc44b90602001610cc2565b6000611008612b2d565b905090565b60006110196005612470565b60fd546040516306df336560e51b81526001600160a01b038881166004830152600092169063dbe66ca090602401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906141a9565b61109b576110968686611ebe565b61109e565b60005b90506110ae878787848888612dd0565b979650505050505050565b60006001600160a01b03821630146110d2576000610a61565b606754610a6190600019614140565b6110e9612f32565b61010454811061110c5760405163309f796760e21b815260040160405180910390fd5b60fe60009054906101000a90046001600160a01b03166001600160a01b0316638a364bc16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118391906140da565b8111156111a35760405163cd4e616760e01b815260040160405180910390fd5b6111ab6128ae565b6101048190556040518181527f6d69e3b0ce68b50a3e467e01c3d62795f90673a3caded8ccf93f44c4832187f0906020015b60405180910390a150565b6111f26007612470565b600060fc5460ff16600381111561120b5761120b613ef0565b1461122957604051631c2ce4fd60e01b815260040160405180910390fd5b33600090815260fb602052604090205480820361125957604051630b5571c160e11b815260040160405180910390fd5b3360009081526065602052604081205461010b5490910361129a576112816101065484612f98565b61010b8190556112918382614121565b610109556113e6565b61010b54811480156112ab57508115155b156112c4576112ba8284612f98565b6112918382614121565b8160000361132d57600061010b54610109546112e091906141cb565b90506112ec8185612f98565b8161010b60008282546112ff9190614109565b9091555061130f90508483614121565b61010960008282546113219190614109565b909155506113e6915050565b82600003611375578061010b60008282546113489190614140565b9091555061135890508282614121565b610109600082825461136a9190614140565b909155506113e69050565b60008161010b546113869190614140565b6113908385614121565b6101095461139e9190614140565b6113a891906141cb565b90506113b48185612f98565b6113be8383614121565b6113c88584614121565b610109546113d69190614109565b6113e09190614140565b61010955505b33600081815260fb602052604090819020859055517f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b849061142a9086815260200190565b60405180910390a2505050565b6033546001600160a01b031633146114615760405162461bcd60e51b8152600401610d1b90614157565b61146b60006130fe565b565b6033546001600160a01b031633146114975760405162461bcd60e51b8152600401610d1b90614157565b600060fc5460ff1660038111156114b0576114b0613ef0565b146114ce57604051631c2ce4fd60e01b815260040160405180910390fd5b6001600160a01b038116600090815260fb60205260408120549081900361150857604051630b5571c160e11b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604081205490508061010b60008282546115369190614140565b9091555061154690508282614121565b61010960008282546115589190614140565b90915550506001600160a01b038316600081815260fb60209081526040808320839055519182527f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84910161142a565b60006115b36001613150565b905080156115cb576000805461ff0019166101001790555b6001600160a01b0387166115f25760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0386166116195760405163d92e233d60e01b815260040160405180910390fd5b6116216131dd565b61162b898961320c565b61163361323d565b60003390506000816001600160a01b0316638a4adf246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169c919061418c565b9050816001600160a01b0316638a364bc16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170091906140da565b8411156117205760405163cd4e616760e01b815260040160405180910390fd5b60fe80546001600160a01b038085166001600160a01b03199283161790925560fd805484841690831681179091556101008054938c1693909216929092179055604080516304c94c4160e31b8152905163264a6208916004808201926020929091908290030181865afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf91906140da565b61010a556101058790556203f4806101035560ff80546001600160a01b0319166001600160a01b038b81169182179092556101048690554261010755600090815260fb60209081526040918290208890556101068890558151632630c12f60e01b8152915192841692632630c12f9260048181019392918290030181865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611873919061418c565b6040516394b26a1b60e01b81523060048201526001600160a01b0391909116906394b26a1b906024016020604051808303816000875af11580156118bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118df919061418c565b60fc60016101000a8154816001600160a01b0302191690836001600160a01b0316021790555061190f8987613264565b50508015611957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b606060698054610a76906140a0565b61197b6004612470565b600260fc5460ff16600381111561199457611994613ef0565b146119b257604051636463738960e01b815260040160405180910390fd5b33600090815260656020526040812054908190036119e35760405163df95788360e01b815260040160405180910390fd5b60006119ee60675490565b6119f84784614121565b611a0291906141cb565b9050611a0e3383613357565b611a183382612511565b60405181815233907f1d63055f2391fc3a61f120d9da75cb686b1384a1a477aafb6bc7cbbceca233599060200160405180910390a25050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015611ad65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d1b565b610ce6828686840361234c565b600033610b078185856126cf565b611af9612f32565b60fe60009054906101000a90046001600160a01b03166001600160a01b031663a0b335e36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7091906140da565b811080611bf2575060fe60009054906101000a90046001600160a01b03166001600160a01b0316630e519ef96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef91906140da565b81115b15611c10576040516321029bc560e11b815260040160405180910390fd5b6101038190556040518181527f26d6292d6fb0e786778ddcd15ee4e4ee219a7b892d1bf667e1c497c85bbcddcb906020016111dd565b611c506006612470565b61146b6128ae565b611c626002612470565b600060fc5460ff166003811115611c7b57611c7b613ef0565b14611c9957604051631c2ce4fd60e01b815260040160405180910390fd5b611cab33611ca660675490565b613357565b61010054610105546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611d0357600080fd5b505af1158015611d17573d6000803e3d6000fd5b505060fc805460ff19166003179055505060405133907f50e4d08b22725f7499f6c76e6e202566b690bb1eba93836a6bacea781f8f783d90600090a2565b611d5f6004612470565b600060fc5460ff166003811115611d7857611d78613ef0565b14611d9657604051631c2ce4fd60e01b815260040160405180910390fd5b6000611da0612b2d565b9050801580611dae57508034105b15611dcc57604051635069375b60e11b815260040160405180910390fd5b61010354611dda9042614109565b6101025560fc805460ff191660011790553461010881905561010180546001600160a01b03191633908117909155604051918252907fc087c4cdb16906b5ff7016a6bf927618f24ff32eb1de5e86eeaeb08b94831a6890602001610cc2565b60006110086134bd565b6033546001600160a01b03163314611e6d5760405162461bcd60e51b8152600401610d1b90614157565b610101805460ff60a01b198116600160a01b9182900460ff1615918202179091556040518181527f31f0cd2056cb14961826087872d64b913fa6118127d4fceade8a9cfe80cce5f5906020016111dd565b60006001600160a01b0383163014611ee95760405163c1ab6dc160e01b815260040160405180910390fd5b6127108260fe60009054906101000a90046001600160a01b03166001600160a01b0316634847cdc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6491906140da565b611f6e9190614121565b611f7891906141cb565b9392505050565b600061010b54600014611f9e5761010b546101095461100891906141cb565b50600090565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b611fd7612f32565b61204a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152925086915085908190840183828082843760009201919091525061372192505050565b50505050565b612058612f32565b60ff546001600160a01b0380831691160361208657604051635e39359760e01b815260040160405180910390fd5b60ff546040516001600160a01b038084169216907fbc21df13ae8a32d7d89d87c70c0d02240cd4fb9554c57522bbbf6f27bfc2dacd90600090a360ff80546001600160a01b0319166001600160a01b0392909216919091179055565b6120ec6004612470565b600160fc5460ff16600381111561210557612105613ef0565b14612123576040516358fd8d1160e01b815260040160405180910390fd5b6101025442101561214757604051636463738960e01b815260040160405180910390fd5b61214f6128ae565b6101005461010154610105546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b1580156121ac57600080fd5b505af11580156121c0573d6000803e3d6000fd5b505060fc805460ff19166002179055505061010154610108546040519081526001600160a01b03909116907fa7f57fa38c1f675856eb8c2460c87aa01ecd63c51d4c817d4389cd5789ccc44b9060200160405180910390a2565b6033546001600160a01b031633146122445760405162461bcd60e51b8152600401610d1b90614157565b6001600160a01b0381166122a95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d1b565b6122b2816130fe565b50565b6000600a60fe60009054906101000a90046001600160a01b03166001600160a01b031663e2386a556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233091906140da565b612338612b2d565b6123429190614121565b61100891906141cb565b6001600160a01b0383166123ae5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d1b565b6001600160a01b03821661240f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d1b565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6033546001600160a01b031633148015906124f3575060fe54604051632f7ca90f60e21b8152600481018390526001600160a01b039091169063bdf2a43c90602401602060405180830381865afa1580156124cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f391906141a9565b156122b2576040516313d0ff5960e31b815260040160405180910390fd5b61251b8282613748565b6126575760fd54604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015612569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258d919061418c565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125ca57600080fd5b505af11580156125de573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018790528516935063a9059cbb925060440190506020604051808303816000875af1158015612633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204a91906141a9565b5050565b60006126678484611fa4565b9050600019811461204a57818110156126c25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d1b565b61204a848484840361234c565b6001600160a01b0383166127335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d1b565b6001600160a01b0382166127955760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d1b565b6127a08383836137ab565b6001600160a01b038316600090815260656020526040902054818110156128185760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d1b565b6001600160a01b0380851660009081526065602052604080822085850390559185168152908120805484929061284f908490614109565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161289b91815260200190565b60405180910390a361204a8484846138b0565b600260fc5460ff1660038111156128c7576128c7613ef0565b036128e55760405163283a4a6160e21b815260040160405180910390fd5b60006127106128f360675490565b610104546129019190614121565b61290b91906141cb565b9050600061291d6301e13380836141cb565b9050600061010754426129309190614140565b9050600061293e8383614121565b9050600060fd60009054906101000a90046001600160a01b03166001600160a01b031663b3f006746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b9919061418c565b9050600060fe60009054906101000a90046001600160a01b03166001600160a01b0316630ea90a126040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3491906140da565b9050612710612a4260675490565b612a4c9083614121565b612a5691906141cb565b9550612a666301e13380876141cb565b94506000612a748686614121565b426101075560ff549091506001600160a01b031615612ad75760ff54612aa3906001600160a01b031685613264565b6040518481527f1e0cd0975cff39cd66cb9c3e27bed07e184c573eca2148dee12e741e43df59da9060200160405180910390a15b6001600160a01b03831615612b2457612af08382613264565b6040518181527f1e0cd0975cff39cd66cb9c3e27bed07e184c573eca2148dee12e741e43df59da9060200160405180910390a15b50505050505050565b60008060fd60009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba7919061418c565b9050600060fe60009054906101000a90046001600160a01b03166001600160a01b03166332977c736040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2291906140da565b612c2a6134bd565b1190506000612c37611f7f565b90506001600160a01b03831615612db857600060fc60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc19190614204565b506001600160701b0316915050600060fe60009054906101000a90046001600160a01b03166001600160a01b031663c96880866040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4791906140da565b612d52836002614121565b1190508015612d9a576000612d6561398e565b90508415612d8757838111612d7a5783612d7c565b805b965050505050505090565b610106548111612d7a5761010654612d7c565b8315612daa575090949350505050565b610106549550505050505090565b81612dc65761010654612dc8565b805b935050505090565b6000612ddb866110b9565b851115612dfb57604051634b29c39b60e11b815260040160405180910390fd5b612e058786613264565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b90612e5d9033908b908b908b908b908b90600401614254565b6020604051808303816000875af1158015612e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea091906140da565b14612ebe57604051637679356b60e01b815260040160405180910390fd5b6000612eca8830611fa4565b905080612ed78688614109565b1115612ef657604051633fe269db60e11b815260040160405180910390fd5b612f10883087612f068a86614140565b610de89190614140565b612f1a8887613357565b612f248886613a83565b506001979650505050505050565b60ff546001600160a01b0316612f6d576033546001600160a01b0316331461146b576040516330cd747160e01b815260040160405180910390fd5b60ff546001600160a01b0316331461146b576040516356b381a560e01b815260040160405180910390fd5b600061271060fe60009054906101000a90046001600160a01b03166001600160a01b03166309990a966040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301491906140da565b61301e9085614121565b61302891906141cb565b90508082101561304b57604051636dddf41160e11b815260040160405180910390fd5b600061271060fe60009054906101000a90046001600160a01b03166001600160a01b0316635410bfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c791906140da565b6130d19086614121565b6130db91906141cb565b90508083111561204a5760405163127f08c960e11b815260040160405180910390fd5b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615613197578160ff1660011480156131735750303b155b61318f5760405162461bcd60e51b8152600401610d1b906142b0565b506000919050565b60005460ff8084169116106131be5760405162461bcd60e51b8152600401610d1b906142b0565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132045760405162461bcd60e51b8152600401610d1b906142fe565b61146b613b0a565b600054610100900460ff166132335760405162461bcd60e51b8152600401610d1b906142fe565b6126578282613b3a565b600054610100900460ff1661146b5760405162461bcd60e51b8152600401610d1b906142fe565b6001600160a01b0382166132ba5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d1b565b6132c6600083836137ab565b80606760008282546132d89190614109565b90915550506001600160a01b03821660009081526065602052604081208054839290613305908490614109565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3612657600083836138b0565b6001600160a01b0382166133b75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d1b565b6133c3826000836137ab565b6001600160a01b038216600090815260656020526040902054818110156134375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d1b565b6001600160a01b0383166000908152606560205260408120838303905560678054849290613466908490614140565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36134b8836000846138b0565b505050565b60008060fd60009054906101000a90046001600160a01b03166001600160a01b0316631ca683a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613537919061418c565b604051633154782f60e01b81523060048201526001600160a01b039190911690633154782f90602401602060405180830381865afa15801561357d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a1919061418c565b90506001600160a01b038116158015906136185750806001600160a01b03166312fa6feb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361891906141a9565b80156136815750806001600160a01b0316636727b0da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561365d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368191906141a9565b1561371557806001600160a01b031663ca5c7b916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e891906140da565b6067546136f59190614140565b61010b5461370590612710614121565b61370f91906141cb565b91505090565b6067546136f5565b5090565b8151613734906068906020850190613b61565b5080516134b8906069906020840190613b61565b600080836001600160a01b03168361753090604051600060405180830381858888f193505050503d806000811461379b576040519150601f19603f3d011682016040523d82523d6000602084013e6137a0565b606091505b509095945050505050565b600060fc5460ff1660038111156137c4576137c4613ef0565b036134b8576001600160a01b03808416600090815260fb60205260408082205492851682529020548082146138a9578060000361383b578261010b600082825461380e9190614140565b9091555061381e90508284614121565b61010960008282546138309190614140565b909155506138a99050565b81600003613878578261010b60008282546138569190614109565b9091555061386690508184614121565b61010960008282546138309190614109565b6138828284614121565b61388c8285614121565b6101095461389a9190614109565b6138a49190614140565b610109555b5050505050565b60fd5460408051632630c12f60e01b815290516000926001600160a01b031691632630c12f9160048083019260209291908290030181865afa1580156138fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391e919061418c565b90506001600160a01b0381161561204a57604051636f0f4fdf60e01b81523060048201526001600160a01b03821690636f0f4fdf90602401600060405180830381600087803b15801561397057600080fd5b505af1158015613984573d6000803e3d6000fd5b5050505050505050565b60fd5460408051632630c12f60e01b815290516000926001600160a01b031691632630c12f9160048083019260209291908290030181865afa1580156139d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139fc919061418c565b6001600160a01b031663a0cbb06230613a1460675490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa925050508015613a79575060408051601f3d908101601f19168201909252613a76918101906140da565b60015b6131d85750600090565b80600003613a8f575050565b60fd5460408051630d43e8ad60e01b815290516000926001600160a01b031691630d43e8ad9160048083019260209291908290030181865afa158015613ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afd919061418c565b90506134b88382846126cf565b600054610100900460ff16613b315760405162461bcd60e51b8152600401610d1b906142fe565b61146b336130fe565b600054610100900460ff166137215760405162461bcd60e51b8152600401610d1b906142fe565b828054613b6d906140a0565b90600052602060002090601f016020900481019282613b8f5760008555613bd5565b82601f10613ba857805160ff1916838001178555613bd5565b82800160010185558215613bd5579182015b82811115613bd5578251825591602001919060010190613bba565b5061371d9291505b8082111561371d5760008155600101613bdd565b600060208284031215613c0357600080fd5b81356001600160e01b031981168114611f7857600080fd5b600060208083528351808285015260005b81811015613c4857858101830151858201604001528201613c2c565b81811115613c5a576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146122b257600080fd5b60008060408385031215613c9857600080fd5b8235613ca381613c70565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613ce257613ce2613cb1565b604051601f8501601f19908116603f01168101908282118183101715613d0a57613d0a613cb1565b81604052809350858152868686011115613d2357600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613d5357600080fd5b8435613d5e81613c70565b93506020850135613d6e81613c70565b925060408501359150606085013567ffffffffffffffff811115613d9157600080fd5b8501601f81018713613da257600080fd5b613db187823560208401613cc7565b91505092959194509250565b600080600060608486031215613dd257600080fd5b8335613ddd81613c70565b92506020840135613ded81613c70565b929592945050506040919091013590565b600060208284031215613e1057600080fd5b8135611f7881613c70565b60008083601f840112613e2d57600080fd5b50813567ffffffffffffffff811115613e4557600080fd5b602083019150836020828501011115613e5d57600080fd5b9250929050565b600080600080600060808688031215613e7c57600080fd5b8535613e8781613c70565b94506020860135613e9781613c70565b935060408601359250606086013567ffffffffffffffff811115613eba57600080fd5b613ec688828901613e1b565b969995985093965092949392505050565b600060208284031215613ee957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160048310613f2857634e487b7160e01b600052602160045260246000fd5b91905290565b600082601f830112613f3f57600080fd5b611f7883833560208501613cc7565b600080600080600080600080610100898b031215613f6b57600080fd5b883567ffffffffffffffff80821115613f8357600080fd5b613f8f8c838d01613f2e565b995060208b0135915080821115613fa557600080fd5b50613fb28b828c01613f2e565b9750506040890135613fc381613c70565b95506060890135613fd381613c70565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806040838503121561400e57600080fd5b823561401981613c70565b9150602083013561402981613c70565b809150509250929050565b6000806000806040858703121561404a57600080fd5b843567ffffffffffffffff8082111561406257600080fd5b61406e88838901613e1b565b9096509450602087013591508082111561408757600080fd5b5061409487828801613e1b565b95989497509550505050565b600181811c908216806140b457607f821691505b6020821081036140d457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156140ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561411c5761411c6140f3565b500190565b600081600019048311821515161561413b5761413b6140f3565b500290565b600082821015614152576141526140f3565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561419e57600080fd5b8151611f7881613c70565b6000602082840312156141bb57600080fd5b81518015158114611f7857600080fd5b6000826141e857634e487b7160e01b600052601260045260246000fd5b500490565b80516001600160701b03811681146131d857600080fd5b60008060006060848603121561421957600080fd5b614222846141ed565b9250614230602085016141ed565b9150604084015163ffffffff8116811461424957600080fd5b809150509250925092565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ecaf4c8c527f958ab4dc8711d00db458a6da9f0479e38e2f6a4c4573f2ce1c8664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "kickCurator(address)": {
        "params": {
          "_curator": "the new curator"
        }
      },
      "maxFlashLoan(address)": {
        "details": "Returns the maximum amount of tokens available for loan.",
        "params": {
          "token": "The address of the token that is requested."
        },
        "returns": {
          "_0": "The amont of token that can be loaned."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionLength(uint256)": {
        "params": {
          "_length": "the new base price"
        }
      },
      "setCurator(address)": {
        "params": {
          "_curator": "the new curator"
        }
      },
      "setFee(uint256)": {
        "params": {
          "_curatorFee": "the new fee"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateUserPrice(uint256)": {
        "params": {
          "newUserReserve": "the desired price in ETH"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuctionStarted(address,uint256)": {
        "notice": "An event emitted when an auction starts"
      },
      "AuctionWon(address,uint256)": {
        "notice": "An event emitted when an auction is won"
      },
      "BidMade(address,uint256)": {
        "notice": "An event emitted when a bid is made"
      },
      "CashWithdrawn(address,uint256)": {
        "notice": "An event emitted when someone cashes in ERC20 tokens for ETH from an ERC721 token sale"
      },
      "PriceUpdated(address,uint256)": {
        "notice": "An event emitted when a user updates their price"
      },
      "TokenRedeemed(address)": {
        "notice": "An event emitted when someone redeems all tokens for the NFT"
      }
    },
    "kind": "user",
    "methods": {
      "auctionEnd()": {
        "notice": "the unix timestamp end time of the token auction"
      },
      "auctionLength()": {
        "notice": "the length of auctions"
      },
      "bid()": {
        "notice": "an external function to bid on purchasing the vaults NFT. The msg.value is the bid amount"
      },
      "cash()": {
        "notice": "an external function to burn ERC20 tokens to receive ETH from ERC721 token purchase"
      },
      "claimCuratorFees()": {
        "notice": "external function to claim fees for the curator and governance"
      },
      "curator()": {
        "notice": "the address who initially deposited the NFT"
      },
      "curatorFee()": {
        "notice": "the AUM fee paid to the curator yearly. 3 decimals. ie. 100 = 10%"
      },
      "end()": {
        "notice": "an external function to end an auction after the timer has run out"
      },
      "factory()": {
        "notice": "the governance contract which gets paid in ETH"
      },
      "initialReserve()": {
        "notice": "initial price of NFT set by curator on creation"
      },
      "kickCurator(address)": {
        "notice": "allow governance to boot a bad actor curator"
      },
      "lastClaimed()": {
        "notice": "the last timestamp where fees were claimed"
      },
      "livePrice()": {
        "notice": "the current price of the token during an auction"
      },
      "redeem()": {
        "notice": "an external function to burn all ERC20 tokens to receive the ERC721 token"
      },
      "removeReserve(address)": {
        "notice": "allow governance to remove bad reserve prices"
      },
      "reserveTotal()": {
        "notice": "reservePrice * votingTokens"
      },
      "setAuctionLength(uint256)": {
        "notice": "allow curator to update the auction length"
      },
      "setCurator(address)": {
        "notice": "allow curator to update the curator address"
      },
      "setFee(uint256)": {
        "notice": "allow the curator to change their fee"
      },
      "start()": {
        "notice": "kick off an auction. Must send reservePrice in ETH"
      },
      "token()": {
        "notice": "the ERC721 token address of the vault's token"
      },
      "tokenId()": {
        "notice": "the ERC721 token id of the nft's token"
      },
      "updateUserPrice(uint256)": {
        "notice": "a function for an end user to update their desired sale price"
      },
      "userReservePrice(address)": {
        "notice": "a mapping of users to their desired token price"
      },
      "vaultManager()": {
        "notice": "the governance contract for all FNFTSingles"
      },
      "verified()": {
        "notice": "whether or not this FNFTSingle has been verified by DAO"
      },
      "votingTokens()": {
        "notice": "the number of ownership tokens voting on the reserve price at any given time"
      },
      "winning()": {
        "notice": "the current user winning the token auction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28705,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28711,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28713,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 28715,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 28717,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 29314,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 28685,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1985,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10746,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "userReservePrice",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10750,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "auctionState",
        "offset": 0,
        "slot": "252",
        "type": "t_enum(State)20372"
      },
      {
        "astId": 10754,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "pair",
        "offset": 1,
        "slot": "252",
        "type": "t_contract(IUniswapV2Pair)22972"
      },
      {
        "astId": 10759,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "vaultManager",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IVaultManager)23264"
      },
      {
        "astId": 10764,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "factory",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IFNFTSingleFactory)20911"
      },
      {
        "astId": 10768,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "curator",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 10772,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "token",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 10776,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "winning",
        "offset": 0,
        "slot": "257",
        "type": "t_address_payable"
      },
      {
        "astId": 10780,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "verified",
        "offset": 20,
        "slot": "257",
        "type": "t_bool"
      },
      {
        "astId": 10784,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "auctionEnd",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 10788,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "auctionLength",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 10792,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "curatorFee",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 10796,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "tokenId",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 10800,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "initialReserve",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 10804,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "lastClaimed",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 10808,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "livePrice",
        "offset": 0,
        "slot": "264",
        "type": "t_uint256"
      },
      {
        "astId": 10812,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "reserveTotal",
        "offset": 0,
        "slot": "265",
        "type": "t_uint256"
      },
      {
        "astId": 10815,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "vaultId",
        "offset": 0,
        "slot": "266",
        "type": "t_uint256"
      },
      {
        "astId": 10819,
        "contract": "src/contracts/FNFTSingle.sol:FNFTSingle",
        "label": "votingTokens",
        "offset": 0,
        "slot": "267",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFNFTSingleFactory)20911": {
        "encoding": "inplace",
        "label": "contract IFNFTSingleFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)22972": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)23264": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_enum(State)20372": {
        "encoding": "inplace",
        "label": "enum IFNFTSingle.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}