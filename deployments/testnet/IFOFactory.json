{
  "address": "0xc9952Fc93Fa9bE383ccB39008c786b9f94eAc95d",
  "abi": [
    {
      "inputs": [],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "IFOExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldCreatorIFOLock",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newCreatorIFOLock",
          "type": "bool"
        }
      ],
      "name": "CreatorIFOLockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCreatorUtilityContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCreatorUtilityContract",
          "type": "address"
        }
      ],
      "name": "CreatorUtilityContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldGovernanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGovernanceFee",
          "type": "uint256"
        }
      ],
      "name": "GovernanceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ifo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fnft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForSale",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowWhitelisting",
          "type": "bool"
        }
      ],
      "name": "IFOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaximumDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaximumDuration",
          "type": "uint256"
        }
      ],
      "name": "MaximumDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimumDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumDuration",
          "type": "uint256"
        }
      ],
      "name": "MinimumDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "childImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_GOV_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childImplementation_",
          "type": "address"
        }
      ],
      "name": "__BeaconUpgradeable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__IFOFactory_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fnft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountForSale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_allowWhitelisting",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorIFOLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorUtilityContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ifos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_creatorIFOLock",
          "type": "bool"
        }
      ],
      "name": "setCreatorIFOLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorUtilityContract",
          "type": "address"
        }
      ],
      "name": "setCreatorUtilityContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_governanceFee",
          "type": "uint256"
        }
      ],
      "name": "setGovernanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maximumDuration",
          "type": "uint256"
        }
      ],
      "name": "setMaximumDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChildImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeChildTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28170c02fac383d670a82846685e670a0683889805090bf03051f4a6b9d0198b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc9952Fc93Fa9bE383ccB39008c786b9f94eAc95d",
    "transactionIndex": 0,
    "gasUsed": "3724219",
    "logsBloom": "0x
    "blockHash": "0x53ac4d718fe2e08198fe31fe182d02fe08238e2767e09de2e96fd07832aa69e1",
    "transactionHash": "0x28170c02fac383d670a82846685e670a0683889805090bf03051f4a6b9d0198b",
    "logs": [],
    "blockNumber": 3693185,
    "cumulativeGasUsed": "3724219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "961fec123a75984f6857e077cf799290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"IFOExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldCreatorIFOLock\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newCreatorIFOLock\",\"type\":\"bool\"}],\"name\":\"CreatorIFOLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCreatorUtilityContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCreatorUtilityContract\",\"type\":\"address\"}],\"name\":\"CreatorUtilityContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGovernanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGovernanceFee\",\"type\":\"uint256\"}],\"name\":\"GovernanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ifo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fnft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForSale\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowWhitelisting\",\"type\":\"bool\"}],\"name\":\"IFOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaximumDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaximumDuration\",\"type\":\"uint256\"}],\"name\":\"MaximumDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_GOV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childImplementation_\",\"type\":\"address\"}],\"name\":\"__BeaconUpgradeable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__IFOFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fnft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowWhitelisting\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorIFOLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorUtilityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ifos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_creatorIFOLock\",\"type\":\"bool\"}],\"name\":\"setCreatorIFOLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorUtilityContract\",\"type\":\"address\"}],\"name\":\"setCreatorUtilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_governanceFee\",\"type\":\"uint256\"}],\"name\":\"setGovernanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumDuration\",\"type\":\"uint256\"}],\"name\":\"setMaximumDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumDuration\",\"type\":\"uint256\"}],\"name\":\"setMinimumDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildImplementation\",\"type\":\"address\"}],\"name\":\"upgradeChildTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"childImplementation()\":{\"details\":\"Returns the current child implementation address.\"},\"create(address,uint256,uint256,uint256,uint256,bool)\":{\"params\":{\"_allowWhitelisting\":\"if IFO should be governed by whitelists\",\"_amountForSale\":\"the amount of FNFT for sale in IFO\",\"_cap\":\"the maximum amount an account can buy\",\"_fnft\":\"the ERC20 token address of the FNFT\",\"_price\":\"the price of each FNFT token\"},\"returns\":{\"_0\":\"IFO address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeChildTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_GOV_FEE()\":{\"notice\":\"10% fee is max\"},\"create(address,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"the function to create an IFO\"},\"creatorIFOLock()\":{\"notice\":\"the boolean whether creator should have access to the creator's FNFT shares after IFO\"},\"feeReceiver()\":{\"notice\":\"the address who receives ifo fees\"},\"ifos(address)\":{\"notice\":\"the mapping of FNFT to IFO address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/IFOFactory.sol\":\"IFOFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x51e5fea61116bd84d45c4bbb0d7923ab0ab182e923b0187667f146327d6ef496\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/IFO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./interfaces/IFNFT.sol\\\";\\nimport \\\"./interfaces/IFNFTSingle.sol\\\";\\nimport \\\"./interfaces/IIFO.sol\\\";\\nimport \\\"./interfaces/IIFOFactory.sol\\\";\\n\\nimport {console} from \\\"../test/utils/console.sol\\\";\\n\\ncontract IFO is IIFO, Initializable {\\n    mapping(address => UserInfo) public override userInfo;\\n    mapping(address => bool) public override whitelisted; // True if user is whitelisted\\n\\n    IIFOFactory public override factory;\\n    IFNFT public override fnft; // FNFT the ifo contract sells\\n    address public override curator;\\n\\n    bool public override allowWhitelisting; // whether the ifo operates through WL\\n    bool public override started; // true when sale is started\\n    bool public override ended; // true when sale is ended\\n    bool public override paused; // circuit breaker\\n\\n    uint256 public override amountForSale; // amount of FNFT for sale\\n    uint256 public override cap; // cap per user\\n    uint256 public override duration; // ifo duration\\n    uint256 public override lockedSupply;\\n    uint256 public override pauseBlock; // block paused\\n    uint256 public override price; // initial price per FNFT\\n    uint256 public override profitRaised;\\n    uint256 public override startBlock; // block started\\n    uint256 public override totalRaised; // total ETH raised by sale\\n    uint256 public override totalSold; // total FNFT sold by sale\\n\\n    /// @param _curator original owner\\n    /// @param _fnftAddress FNFT address\\n    /// @param _amountForSale Amount of FNFT for sale in IFO\\n    /// @param _price Price per FNFT in IFO\\n    /// @param _cap Maximum an account can buy\\n    /// @param _duration Duration of IFO. Max duration set by DAO if _duration == 0\\n    /// @param _allowWhitelisting If IFO should be governed by whitelists\\n    function __IFO_init(\\n        address _curator,\\n        address _fnftAddress,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external override initializer {\\n        // set storage variables\\n        if (_curator == address(0)) revert ZeroAddress();\\n        if (_fnftAddress == address(0)) revert ZeroAddress();\\n        IFNFT _fnft = IFNFT(_fnftAddress);\\n        uint256 curatorSupply = _fnft.balanceOf(_curator);\\n        uint256 totalSupply = _fnft.totalSupply();\\n        IIFOFactory _factory = IIFOFactory(msg.sender);\\n        // make sure curator holds 100% of the FNFT before IFO (May change if DAO takes fee on fractionalize)\\n        if (IERC165(_fnftAddress).supportsInterface(type(IFNFTSingle).interfaceId)) {\\n            // reject if MC of IFO greater than reserve price set by curator. Protects the initial investors\\n            //if the requested price of the tokens here is greater than the implied value of each token from the initial reserve, revert\\n            if (curatorSupply < totalSupply) revert NotEnoughSupply();\\n            if (_price * totalSupply / (10 ** _fnft.decimals()) > IFNFTSingle(_fnftAddress).initialReserve()) revert InvalidReservePrice();\\n        } else {\\n            //0.5 ether is the maximum (50%) mint fee for collection.\\n            if (totalSupply == 0 || curatorSupply < totalSupply / 2) revert NotEnoughSupply();\\n        }\\n        // make sure amount for sale is not bigger than the supply if FNFT\\n        if (_amountForSale == 0 || _amountForSale > curatorSupply) revert InvalidAmountForSale();\\n        if (_cap == 0 || _cap > totalSupply) revert InvalidCap();\\n        // expect ifo duration to be between minimum and maximum durations set by the DAO\\n        if (_duration != 0 &&\\n        (_duration < _factory.minimumDuration()\\n        || _duration > _factory.maximumDuration())) revert InvalidDuration();\\n\\n        factory = _factory;\\n        curator = _curator;\\n        amountForSale = _amountForSale;\\n        price = _price;\\n        cap = _cap;\\n        allowWhitelisting = _allowWhitelisting;\\n        duration = _duration;\\n        fnft = _fnft;\\n\\n        /// @notice approve FNFT usage by creator utility contract, to deploy LP pool or stake if IFOLock enabled\\n        address creatorUtilityContract = IIFOFactory(msg.sender).creatorUtilityContract();\\n        if (creatorUtilityContract != address(0)) {\\n            _fnft.approve(creatorUtilityContract, totalSupply);\\n        }\\n    }\\n\\n    /// @notice checks if whitelist period is over and ends whitelist\\n    modifier checkDeadline() {\\n        if (block.number > startBlock + duration && duration != 0 && !ended) {\\n            end();\\n        }\\n        _;\\n    }\\n\\n    /// @notice modifer to check if contract is paused\\n    modifier checkPaused() {\\n        if (paused) revert ContractPaused();\\n        _;\\n    }\\n\\n    modifier onlyCurator() {\\n        if (msg.sender != curator) revert NotCurator();\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != OwnableUpgradeable(address(factory)).owner()) revert NotGov();\\n        _;\\n    }\\n\\n    /// @notice modifer to check if contract accepts whitelists\\n    modifier whitelistingAllowed() {\\n        if (!allowWhitelisting) revert WhitelistingDisallowed();\\n        _;\\n    }\\n\\n    /**\\n     *  @notice adds multiple whitelist to the sale\\n     *  @param _addresses: dynamic array of addresses to whitelist\\n     */\\n    function addMultipleWhitelists(address[] calldata _addresses) external override onlyCurator whitelistingAllowed {\\n        if (_addresses.length > 333) revert TooManyWhitelists();\\n        for (uint256 i; i < _addresses.length;) {\\n            whitelisted[_addresses[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice adds a single whitelist to the sale\\n     *  @param _address: address to whitelist\\n     */\\n    function addWhitelist(address _address) external override onlyCurator whitelistingAllowed {\\n        whitelisted[_address] = true;\\n    }\\n\\n    /// @notice withdraws FNFT from sale only after IFO. Can only withdraw after NFT redemption if IFOLock enabled\\n    function adminWithdrawFNFT() external override checkDeadline onlyCurator {\\n        if (!ended) revert SaleActive();\\n        IFNFT _fnft = fnft;\\n        if (IERC165(address(_fnft)).supportsInterface(type(IFNFTSingle).interfaceId) &&\\n            IFNFTSingle(address(_fnft)).auctionState() != IFNFTSingle.State.Ended && _fnftLocked()) {\\n            revert FNFTLocked();\\n        }\\n\\n        uint256 balance = _fnft.balanceOf(address(this));\\n        lockedSupply -= balance;\\n        _fnft.transfer(msg.sender, balance);\\n\\n        emit AdminFNFTWithdrawn(address(_fnft), balance);\\n    }\\n\\n    /// @notice withdraws ETH from sale only after IFO over\\n    function adminWithdrawProfit() external override checkDeadline onlyCurator {\\n        if (!ended) revert SaleActive();\\n        if (profitRaised == 0) revert NoProfit();\\n        uint256 profit = profitRaised;\\n        profitRaised = 0;\\n\\n        _safeTransferETH(msg.sender, profit);\\n\\n        emit AdminProfitWithdrawn(address(fnft), profit);\\n    }\\n\\n    /// @notice approve FNFT usage by creator utility contract, to deploy LP pool or stake if IFOLock enabled\\n    function approve() external override onlyCurator {\\n        address creatorUtilityContract = factory.creatorUtilityContract();\\n        if (creatorUtilityContract == address(0)) revert ZeroAddress();\\n        IFNFT _fnft = fnft;\\n        _fnft.approve(creatorUtilityContract, _fnft.totalSupply());\\n    }\\n\\n    /// @notice it deposits ETH for the sale\\n    function deposit() external payable override checkPaused checkDeadline {\\n        if (!started) revert SaleUnstarted();\\n        if (ended) revert SaleAlreadyEnded();\\n        if (allowWhitelisting) {\\n            if (!whitelisted[msg.sender]) revert NotWhitelisted();\\n        }\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        IFNFT _fnft = fnft;\\n\\n        // FNFT to mint for msg.value\\n        uint256 payout = msg.value * (10 ** _fnft.decimals()) / price;\\n\\n        if (user.amount + payout > cap) revert OverLimit();\\n\\n        totalSold += payout;\\n\\n        IIFOFactory _factory = factory;\\n        address govAddress = _factory.feeReceiver();\\n        uint256 govFee = _factory.governanceFee();\\n\\n        uint256 fee = (govFee * msg.value) / 10000;\\n        uint256 profit = msg.value - fee;\\n\\n        user.amount += payout;\\n        totalRaised += msg.value;\\n        profitRaised += profit;\\n\\n        _fnft.transfer(msg.sender, payout);\\n        _safeTransferETH(govAddress, fee);\\n\\n        emit FNFTSold(msg.sender, msg.value, payout);\\n    }\\n\\n    function emergencyWithdrawFNFT() external override onlyGov {\\n        IFNFT _fnft = fnft;\\n        uint256 balance = _fnft.balanceOf(address(this));\\n        lockedSupply = 0;\\n        _fnft.transfer(curator, balance);\\n\\n        emit EmergencyFNFTWithdrawn(address(_fnft), balance);\\n    }\\n\\n    /// @notice Ends the sale\\n    function end() public override onlyCurator checkPaused {\\n        if (!started) revert SaleUnstarted();\\n        if (\\n            block.number <= startBlock + duration || // If not past duration\\n            block.number - startBlock < factory.minimumDuration() // If tries to end before minimum duration\\n        ) revert DeadlineActive();\\n        if (ended) revert SaleAlreadyEnded();\\n\\n        ended = true;\\n        lockedSupply = fnft.balanceOf(address(this));\\n        emit SaleEnded();\\n    }\\n\\n    function fnftLocked() external view override returns(bool) {\\n        return _fnftLocked();\\n    }\\n\\n    /** @notice it checks a users ETH allocation remaining\\n    *   @param _user: user's remaining allocation based on cap\\n    */\\n    function getUserRemainingAllocation(address _user) external view override returns (uint256) {\\n        UserInfo memory user = userInfo[_user];\\n        return cap - user.amount;\\n    }\\n\\n    /**\\n     *  @notice removes a single whitelist from the sale\\n     *  @param _address: address to remove from whitelist\\n     */\\n    function removeWhitelist(address _address) external override onlyCurator whitelistingAllowed {\\n        whitelisted[_address] = false;\\n    }\\n\\n    /// @notice Starts the sale and checks if all FNFT is in IFO\\n    function start() external override onlyCurator {\\n        if (started) revert SaleAlreadyStarted();\\n        if (ended) revert SaleAlreadyEnded();\\n\\n        IFNFT _fnft = fnft;\\n        uint256 ifoFNFTBalance = _fnft.balanceOf(address(this));\\n        uint256 totalSupply = _fnft.totalSupply();\\n        // make sure curator holds 100% of the FNFT before IFO (May change if DAO takes fee on fractionalize)\\n        if (IERC165(address(_fnft)).supportsInterface(type(IFNFTSingle).interfaceId)) {\\n            // reject if MC of IFO greater than reserve price set by curator. Protects the initial investors\\n            //if the requested price of the tokens here is greater than the implied value of each token from the initial reserve, revert\\n            if (ifoFNFTBalance < totalSupply) revert NotEnoughSupply();\\n        } else {\\n            //0.5 ether is the maximum (50%) mint fee for collection.\\n            if (totalSupply == 0 || ifoFNFTBalance < totalSupply / 2) revert NotEnoughSupply();\\n        }\\n        startBlock = block.number;\\n        started = true;\\n        emit SaleStarted();\\n    }\\n\\n    //TODO: Add a circute breaker controlled by the DAO\\n\\n    /// @notice lets owner pause contract. Pushes back the IFO end date\\n    function togglePause() external override onlyCurator checkDeadline returns (bool) {\\n        if (!started) revert SaleUnstarted();\\n        if (ended) revert SaleAlreadyEnded();\\n\\n        if (paused) {\\n            duration += block.number - pauseBlock;\\n            paused = false;\\n        } else {\\n            pauseBlock = block.number;\\n            paused = true;\\n        }\\n        emit PausedToggled(paused);\\n        return paused;\\n    }\\n    /** @notice If wrong FNFT\\n    *   @param _address: address of FNFT\\n    */\\n    function updateFNFTAddress(address _address) external override onlyGov {\\n        if (_address == address(0)) revert ZeroAddress();\\n        fnft = IFNFT(_address);\\n    }\\n\\n    function _fnftLocked() internal view returns(bool) {\\n        return factory.creatorIFOLock();\\n    }\\n\\n    /** @notice transfer ETH using call\\n    *   @param _to: address to transfer ETH to\\n    *   @param _value: amount of ETH to transfer\\n    */\\n    function _safeTransferETH(address _to, uint256 _value) private {\\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\\n        if (!success) revert TxFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x7e6d03abffb01f155eae539c598779ff05bd94df1cb50bdce1b49b45c29f9e1a\",\"license\":\"MIT\"},\"src/contracts/IFOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFO.sol\\\";\\nimport \\\"./interfaces/IIFOFactory.sol\\\";\\nimport \\\"./proxy/BeaconProxy.sol\\\";\\nimport \\\"./proxy/BeaconUpgradeable.sol\\\";\\n\\ncontract IFOFactory is IIFOFactory, OwnableUpgradeable, PausableUpgradeable, BeaconUpgradeable {\\n    /// @notice 10% fee is max\\n    uint256 public constant MAX_GOV_FEE = 1000;\\n\\n    /// @notice the mapping of FNFT to IFO address\\n    mapping(address => address) public override ifos;\\n\\n    address public override creatorUtilityContract;\\n    /// @notice the address who receives ifo fees\\n    address payable public override feeReceiver;\\n    /// @notice the boolean whether creator should have access to the creator's FNFT shares after IFO\\n    bool public override creatorIFOLock;\\n\\n    uint256 public override governanceFee;\\n    uint256 public override maximumDuration;\\n    uint256 public override minimumDuration;\\n\\n    function __IFOFactory_init() external override initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __BeaconUpgradeable__init(address(new IFO()));\\n\\n        feeReceiver = payable(msg.sender);\\n        governanceFee = 200;\\n        maximumDuration = 7776000; // 90 days;\\n        minimumDuration = 86400; // 1 day;\\n    }\\n\\n    /// @notice the function to create an IFO\\n    /// @param _fnft the ERC20 token address of the FNFT\\n    /// @param _amountForSale the amount of FNFT for sale in IFO\\n    /// @param _price the price of each FNFT token\\n    /// @param _cap the maximum amount an account can buy\\n    /// @param _allowWhitelisting if IFO should be governed by whitelists\\n    /// @return IFO address\\n    function create(\\n        address _fnft,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external override whenNotPaused returns (address) {\\n        bytes memory _initializationCalldata = abi.encodeWithSelector(\\n            IFO.__IFO_init.selector,\\n            msg.sender,\\n            _fnft,\\n            _amountForSale,\\n            _price,\\n            _cap,\\n            _duration,\\n            _allowWhitelisting\\n        );\\n\\n        address _ifo = address(new BeaconProxy(address(this), _initializationCalldata));\\n        ifos[_fnft] = _ifo;\\n\\n        IERC20(_fnft).transferFrom(msg.sender, _ifo, IERC20(_fnft).balanceOf(msg.sender));\\n\\n        emit IFOCreated(_ifo, _fnft, _amountForSale, _price, _cap, _duration, _allowWhitelisting);\\n\\n        return _ifo;\\n    }\\n\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    function setCreatorIFOLock(bool _creatorIFOLock) external override onlyOwner {\\n        emit CreatorIFOLockUpdated(creatorIFOLock, _creatorIFOLock);\\n        creatorIFOLock = _creatorIFOLock;\\n    }\\n\\n    function setCreatorUtilityContract(address _creatorUtilityContract) external override onlyOwner {\\n        emit CreatorUtilityContractUpdated(creatorUtilityContract, _creatorUtilityContract);\\n        creatorUtilityContract = _creatorUtilityContract;\\n    }\\n\\n    function setFeeReceiver(address payable _feeReceiver) external override onlyOwner {\\n        if (_feeReceiver == address(0)) revert ZeroAddress();\\n        emit FeeReceiverUpdated(feeReceiver, _feeReceiver);\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function setGovernanceFee(uint256 _governanceFee) external override onlyOwner {\\n        if (_governanceFee > MAX_GOV_FEE) revert FeeTooHigh();\\n        emit GovernanceFeeUpdated(governanceFee, _governanceFee);\\n        governanceFee = _governanceFee;\\n    }\\n\\n    function setMaximumDuration(uint256 _maximumDuration) external override onlyOwner {\\n        if (minimumDuration > _maximumDuration) revert InvalidDuration();\\n        emit MaximumDurationUpdated(maximumDuration, _maximumDuration);\\n        maximumDuration = _maximumDuration;\\n    }\\n\\n    function setMinimumDuration(uint256 _minimumDuration) external override onlyOwner {\\n        if (_minimumDuration > maximumDuration) revert InvalidDuration();\\n        emit MinimumDurationUpdated(minimumDuration, _minimumDuration);\\n        minimumDuration = _minimumDuration;\\n    }\\n\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xc317d69f9d9b85b21884cff21ecb07e1dcfa03a95c7a92efc67582c808cf41e5\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\ninterface IFNFT {\\n    function vaultId() external returns (uint256);\\n\\n    function pair() external returns (IUniswapV2Pair);\\n\\n    function factory() external returns (address);\\n\\n    function vaultManager() external returns (IVaultManager);\\n\\n    function verified() external returns (bool);\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    //ERC20 Interface\\n\\n    function decimals() external returns (uint8);\\n\\n    function balanceOf(address _account) external returns (uint256);\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xad47442ec4cbccf4464c71b34558e56e75261c7a483b1f1d8a57d4bfe6bd0d79\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTSingle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IFNFTSingleFactory.sol\\\";\\nimport \\\"../token/ERC20Upgradeable.sol\\\";\\n\\ninterface IFNFTSingle  is IERC20Upgradeable {\\n    enum State {\\n        Inactive,\\n        Live,\\n        Ended,\\n        Redeemed\\n    }\\n\\n    function token() external returns (address);\\n\\n    function winning() external returns (address payable);\\n\\n    function vaultId() external returns (uint256);\\n\\n    function tokenId() external returns (uint256);\\n\\n    function auctionEnd() external returns (uint256);\\n\\n    function auctionLength() external returns (uint256);\\n\\n    function reserveTotal() external returns (uint256);\\n\\n    function livePrice() external returns (uint256);\\n\\n    function pair() external returns (IUniswapV2Pair);\\n\\n    function auctionState() external returns (State);\\n\\n    function factory() external returns (IFNFTSingleFactory);\\n\\n    function vaultManager() external returns (IVaultManager);\\n\\n    function verified() external returns (bool);\\n\\n    function curator() external returns (address);\\n\\n    function curatorFee() external returns (uint256);\\n\\n    function lastClaimed() external returns (uint256);\\n\\n    function votingTokens() external returns (uint256);\\n\\n    function initialReserve() external returns (uint256);\\n\\n    function userReservePrice(address) external returns (uint256);\\n\\n    function __FNFTSingle_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _curator,\\n        address _token,\\n        uint256 _id,\\n        uint256 _supply,\\n        uint256 _listPrice,\\n        uint256 _curatorFee\\n    ) external;\\n\\n    function reservePrice() external view returns (uint256);\\n\\n    function kickCurator(address _curator) external;\\n\\n    function removeReserve(address _user) external;\\n\\n    function toggleVerified() external;\\n\\n    function setCurator(address _curator) external;\\n\\n    function setAuctionLength(uint256 _length) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function claimCuratorFees() external;\\n\\n    function getAuctionPrice() external view returns (uint256);\\n\\n    function buyItNow() external payable;\\n\\n    function buyItNowPrice() external view returns (uint256);\\n\\n    function updateUserPrice(uint256 newUserReserve) external;\\n\\n    function getQuorum() external view returns (uint256);\\n\\n    function start() external payable;\\n\\n    function bid() external payable;\\n\\n    function end() external;\\n\\n    function redeem() external;\\n\\n    function cash() external;\\n\\n    function flashFee(address borrowedToken, uint256 amount) external view returns (uint256);\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address borrowedToken,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external;\\n\\n    /// @notice An event emitted when a user updates their price\\n    event PriceUpdated(address indexed user, uint256 price);\\n    /// @notice An event emitted when an auction starts\\n    event AuctionStarted(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when a bid is made\\n    event BidMade(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when an auction is won\\n    event AuctionWon(address indexed buyer, uint256 price);\\n    /// @notice An event emitted when someone redeems all tokens for the NFT\\n    event TokenRedeemed(address indexed redeemer);\\n    /// @notice An event emitted when someone cashes in ERC20 tokens for ETH from an ERC721 token sale\\n    event CashWithdrawn(address indexed owner, uint256 shares);\\n    event AuctionLengthUpdated(uint256 length);\\n    event CuratorFeeUpdated(uint256 curatorFee);\\n    event CuratorFeeClaimed(uint256 curatorFee);\\n    event Verified(bool verified);\\n    event CuratorKicked(address indexed oldCurator, address indexed newCurator);\\n    event CuratorUpdated(address indexed oldCurator, address indexed newCurator);\\n\\n    error AuctionEnded();\\n    error AuctionLive();\\n    error AuctionNotEnded();\\n    error AuctionNotLive();\\n    error BidTooLow();\\n    error CanNotRaise();\\n    error FeeTooHigh();\\n    error InvalidAuctionLength();\\n    error NotAnUpdate();\\n    error NotCurator();\\n    error NotEnoughETH();\\n    error NotEnoughVoters();\\n    error NotOwner();\\n    error NoTokens();\\n    error Paused();\\n    error PriceTooHigh();\\n    error PriceTooLow();\\n    error SameCurator();\\n    error InvalidToken();\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x4eec8b7736b3bcf5f4b8c0ea859350334834079a4b9681f4faa6c92138574461\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFNFTSingleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {IPriceOracle} from \\\"./IPriceOracle.sol\\\";\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\nimport {IVaultManager} from \\\"./IVaultManager.sol\\\";\\n\\ninterface IFNFTSingleFactory {\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function maxAuctionLength() external view returns (uint256);\\n\\n    function minAuctionLength() external view returns (uint256);\\n\\n    function maxCuratorFee() external view returns (uint256);\\n\\n    function governanceFee() external view returns (uint256);\\n\\n    function minBidIncrease() external view returns (uint256);\\n\\n    function minVotePercentage() external view returns (uint256);\\n\\n    function maxReserveFactor() external view returns (uint256);\\n\\n    function minReserveFactor() external view returns (uint256);\\n\\n    function liquidityThreshold() external view returns (uint256);\\n\\n    function instantBuyMultiplier() external view returns (uint256);\\n\\n    function __FNFTSingleFactory_init(address _vaultManager, address _fnftSingle) external;\\n\\n    function createVault(\\n        address _nft,\\n        uint256 _tokenId,\\n        uint256 _supply,\\n        uint256 _listPrice,\\n        uint256 _fee,\\n        string memory _name,\\n        string memory _symbol\\n    ) external returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function setFactoryFees(\\n        uint256 _governanceFee,\\n        uint256 _maxCuratorFee,\\n        uint256 _flashLoanFee\\n    ) external;\\n\\n    function setFactoryThresholds(\\n        uint256 _maxAuctionLength,\\n        uint256 _minAuctionLength,\\n        uint256 _minReserveFactor,\\n        uint256 _maxReserveFactor,\\n        uint256 _minBidIncrease,\\n        uint256 _minVotePercentage,\\n        uint256 _liquidityThreshold,\\n        uint256 _instantBuyMultiplier\\n    ) external;\\n\\n    event FactoryFeesUpdated(uint256 governanceFee, uint256 maxCuratorFee, uint256 flashLoanFee);\\n    event FactoryThresholdsUpdated(\\n        uint256 maxAuctionLength,\\n        uint256 minAuctionLength,\\n        uint256 minReserveFactor,\\n        uint256 maxReserveFactor,\\n        uint256 minBidIncrease,\\n        uint256 minVotePercentage,\\n        uint256 liquidityThreshold,\\n        uint256 instantBuyMultiplier\\n    );\\n    event FeeExclusionUpdated(address target, bool excluded);\\n    event VaultCreated(\\n        uint256 indexed vaultId,\\n        address curator,\\n        address vaultAddress,\\n        address assetAddress,\\n        uint256 tokenId,\\n        uint256 supply,\\n        uint256 listPrice,\\n        string name,\\n        string symbol\\n    );\\n    event VaultCurated(\\n        address vaultAddress,\\n        address curator,\\n        uint256 supply,\\n        uint256 listPrice,\\n        uint256 fee\\n    );\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MaxReserveFactorTooLow();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x8adf8ad9d83641722a25bf4b37247afceebae7c5b07c1a18e2451f28c4f1f230\",\"license\":\"MIT\"},\"src/contracts/interfaces/IIFO.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFNFT.sol\\\";\\nimport \\\"./IIFOFactory.sol\\\";\\n\\ninterface IIFO {\\n    struct UserInfo {\\n        uint256 amount; // Amount ETH deposited by user\\n        uint256 debt; // total FNFT claimed thus FNFT debt\\n    }\\n\\n    function curator() external view returns (address);\\n\\n    function factory() external view returns (IIFOFactory);\\n\\n    function fnft() external view returns (IFNFT);\\n\\n    function amountForSale() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function cap() external view returns (uint256);\\n\\n    function totalRaised() external view returns (uint256);\\n\\n    function profitRaised() external view returns (uint256);\\n\\n    function totalSold() external view returns (uint256);\\n\\n    function lockedSupply() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function pauseBlock() external view returns (uint256);\\n\\n    function allowWhitelisting() external view returns (bool);\\n\\n    function started() external view returns (bool);\\n\\n    function ended() external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function userInfo(address) external view returns (uint256, uint256);\\n\\n    function whitelisted(address) external view returns (bool);\\n\\n    function __IFO_init(\\n        address _curator,\\n        address _fnftAddress,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function addMultipleWhitelists(address[] calldata _addresses) external;\\n\\n    function removeWhitelist(address _address) external;\\n\\n    function start() external;\\n\\n    function togglePause() external returns (bool);\\n\\n    function end() external;\\n\\n    function deposit() external payable;\\n\\n    function getUserRemainingAllocation(address _user) external view returns (uint256);\\n\\n    function updateFNFTAddress(address _address) external;\\n\\n    function adminWithdrawProfit() external;\\n\\n    function adminWithdrawFNFT() external;\\n\\n    function approve() external;\\n\\n    function emergencyWithdrawFNFT() external;\\n\\n    function fnftLocked() external view returns (bool);\\n\\n    event FNFTSold(address indexed buyer, uint256 amount, uint256 payout);\\n    event SaleStarted();\\n    event SaleEnded();\\n    event PausedToggled(bool paused);\\n    event AdminProfitWithdrawn(address FNFT, uint256 amount);\\n    event AdminFNFTWithdrawn(address FNFT, uint256 amount);\\n    event EmergencyFNFTWithdrawn(address FNFT, uint256 amount);\\n\\n    error ContractPaused();\\n    error DeadlineActive();\\n    error FNFTLocked();\\n    error InvalidAmountForSale();\\n    error InvalidCap();\\n    error InvalidDuration();\\n    error InvalidPrice();\\n    error InvalidReservePrice();\\n    error NoLiquidityProvided();\\n    error NoProfit();\\n    error NotCurator();\\n    error NotEnoughSupply();\\n    error NotGov();\\n    error NotWhitelisted();\\n    error OverLimit();\\n    error SaleActive();\\n    error SaleAlreadyEnded();\\n    error SaleAlreadyStarted();\\n    error SaleUnstarted();\\n    error TooManyWhitelists();\\n    error TxFailed();\\n    error WhitelistingDisallowed();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x3b02eca7a2ed42739dfd6d35ace53d6e7a47ba3e9eb5c71516f541e0a44df8a1\",\"license\":\"MIT\"},\"src/contracts/interfaces/IIFOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IIFOFactory {\\n    function ifos(address) external view returns (address);\\n\\n    function minimumDuration() external view returns (uint256);\\n\\n    function maximumDuration() external view returns (uint256);\\n\\n    function governanceFee() external view returns (uint256);\\n\\n    function creatorUtilityContract() external view returns (address);\\n\\n    function creatorIFOLock() external view returns (bool);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function __IFOFactory_init() external;\\n\\n    function create(\\n        address _fnft,\\n        uint256 _amountForSale,\\n        uint256 _price,\\n        uint256 _cap,\\n        uint256 _duration,\\n        bool _allowWhitelisting\\n    ) external returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setCreatorIFOLock(bool _creatorIFOLock) external;\\n\\n    function setMinimumDuration(uint256 _minimumDuration) external;\\n\\n    function setMaximumDuration(uint256 _maximumDuration) external;\\n\\n    function setCreatorUtilityContract(address _creatorUtilityContract) external;\\n\\n    function setGovernanceFee(uint256 _governanceFee) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    event CreatorIFOLockUpdated(bool oldCreatorIFOLock, bool newCreatorIFOLock);\\n    event MinimumDurationUpdated(uint256 oldMinimumDuration, uint256 newMinimumDuration);\\n    event MaximumDurationUpdated(uint256 oldMaximumDuration, uint256 newMaximumDuration);\\n    event CreatorUtilityContractUpdated(address oldCreatorUtilityContract, address newCreatorUtilityContract);\\n    event GovernanceFeeUpdated(uint256 oldGovernanceFee, uint256 newGovernanceFee);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event IFOCreated(\\n        address indexed ifo,\\n        address indexed fnft,\\n        uint256 amountForSale,\\n        uint256 price,\\n        uint256 cap,\\n        uint256 duration,\\n        bool allowWhitelisting\\n    );\\n\\n    error FeeTooHigh();\\n    error IFOExists(address nft);\\n    error InvalidDuration();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x56a0b20280e9fda765fb03f142517ac0f2f9523ac73080f500801c5d572d9180\",\"license\":\"MIT\"},\"src/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/UQ112x112.sol\\\";\\nimport \\\"../libraries/math/FixedPoint.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\n\\ninterface IPriceOracle {\\n    // Struct that contains metadata of two token pair that is stored in the liquidity pool.\\n    // Metadata used to calculated TWAP (Time-weighted average price).\\n    struct PairInfo {\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        FixedPoint.uq112x112 price0Average;\\n        FixedPoint.uq112x112 price1Average;\\n        uint216 totalUpdates;\\n        uint32 blockTimestampLast;\\n        bool exists;\\n    }\\n\\n    function period() external view returns (uint256);\\n\\n    function minimumPairInfoUpdate() external view returns (uint256);\\n\\n    function WETH() external view returns (address);\\n\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    function __PriceOracle_init() external;\\n\\n    function setPeriod(uint256 _period) external;\\n\\n    function setMinimumPairInfoUpdate(uint256 _minimumPairInfoUpdate) external;\\n\\n    function getPairAddress(address _token0, address _token1) external view returns (address);\\n\\n    function getPairInfo(address _token0, address _token1) external view returns (PairInfo memory pairInfo);\\n\\n    function getPairInfo(address _pair) external view returns (PairInfo memory pairInfo);\\n\\n    function updatePairInfo(address _token0, address _token1) external;\\n\\n    function updateFNFTPairInfo(address _fnft) external;\\n\\n    function createFNFTPair(address _token0) external returns (address);\\n\\n    function consult(\\n        address _token,\\n        address _pair,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getFNFTPriceETH(address _fnft, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    event PeriodUpdated(uint256 oldPeriod, uint256 newPeriod);\\n    event MinimumPairInfoUpdateUpdated(uint256 oldMinimumPairInfoUpdate, uint256 newMinimumPairInfoUpdate);\\n\\n    error InvalidToken();\\n    error NotEnoughUpdates();\\n    error PairInfoAlreadyExists();\\n    error PairInfoDoesNotExist();\\n}\\n\",\"keccak256\":\"0x1e4947bb1b352879a5661acf90d2a0229bf89964dd95ba6c57c890c112ffecbe\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n}\\n\",\"keccak256\":\"0xbff8a2e20a5340751c23480b5f703f2a8af70fc2f8c8095862b89258295a9544\",\"license\":\"MIT\"},\"src/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n}\\n\",\"keccak256\":\"0x3b04b809645e0975ca14025904c43dc95655bda03e6685e6d10ee7d6950aa514\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVaultManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVaultManager {\\n    function fnftSingleFactory() external view returns (address);\\n\\n    function fnftCollectionFactory() external view returns (address);\\n\\n    function excludedFromFees(address) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function __VaultManager_init(\\n        address _weth,\\n        address _ifoFactory,\\n        address _priceOracle\\n    ) external;\\n\\n    function WETH() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function ifoFactory() external view returns (address);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeReceiver() external view returns (address payable);\\n\\n    function togglePaused() external;\\n\\n    function addVault(address _fnft) external returns (uint256 vaultId);\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setFeeExclusion(address _address, bool _excluded) external;\\n\\n    function setFeeReceiver(address payable _feeReceiver) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFNFTCollectionFactory(address _fnftCollectionFactory) external;\\n\\n    function setFNFTSingleFactory(address _fnftCollectionFactory) external;\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function vaults(uint256) external view returns (address);\\n\\n    function numVaults() external view returns (uint);\\n\\n    event PriceOracleUpdated(address oldPriceOracle, address newPriceOracle);\\n    event FeeReceiverUpdated(address oldFeeReceiver, address newFeeReceiver);\\n    event ZapContractUpdated(address oldZapContract, address newZapContract);\\n    event FNFTCollectionFactoryUpdated(address oldFNFTCollectionFactory, address newFNFTCollectionFactory);\\n    event FNFTSingleFactoryUpdated(address oldFNFTSingleFactory, address newFNFTSingleFactory);\\n    event VaultAdded(uint256 vaultId, address vault);\\n    event FeeDistributorUpdated(address oldFeeDistributor, address newFeeDistributor);\\n    event FeeExclusionUpdated(address target, bool excluded);\\n\\n    error FeeTooHigh();\\n    error MaxAuctionLengthOutOfBounds();\\n    error MaxReserveFactorTooLow();\\n    error MinAuctionLengthOutOfBounds();\\n    error MinBidIncreaseOutOfBounds();\\n    error MinReserveFactorTooHigh();\\n    error MinVotePercentageTooHigh();\\n    error MultiplierTooLow();\\n    error OnlyFactory();\\n    error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x627955435c64cfedd26e5ced55adf691870c03a95e5e962216cb7d8f6068efeb\",\"license\":\"MIT\"},\"src/contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x43b434c00d9d687556e827aa718563f12bd7a74a1732bfd833ddc54abf922384\",\"license\":\"MIT\"},\"src/contracts/libraries/UQ112x112.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x8cd773695d730f37bebc3f721e638ae18855eb427a577d4de3f9c8f5646489fd\",\"license\":\"MIT\"},\"src/contracts/libraries/math/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1d203de39344d996ef88c66a47936767b7fef60058eb6e2180c91b7f93abe8\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n        r = 255;\\n        if (x & type(uint256).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint256).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1164085aeec4c45a594dc008d041b6c4fd496d6364bb303f0e65a79be091a855\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"FixedPoint::muli: overflow:\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= type(uint144).max) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xfbd1eac26ce29e109992b7b32db7b73e4a6f756205faf7fcb29359b4f6b351ea\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity 0.8.13;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (type(uint8).max - d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * (((type(uint8).max - pow2 + 1)) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xf5c057a505932a37882cac8417f65110a39381a4588ded1da4a3686eb1e77883\",\"license\":\"CC-BY-4.0\"},\"src/contracts/proxy/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).childImplementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).childImplementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf4d4c86d46f7e3eed9c0a799bac7a41c6669b8f216d24d435c5d95497397d3ba\",\"license\":\"MIT\"},\"src/contracts/proxy/BeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract BeaconUpgradeable is OwnableUpgradeable, IBeacon {\\n    address private _childImplementation;\\n\\n    /**\\n     * @dev Emitted when the child implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed childImplementation);\\n\\n    function __BeaconUpgradeable__init(address childImplementation_) public initializer {\\n        _setChildImplementation(childImplementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current child implementation address.\\n     */\\n    function childImplementation() public view virtual override returns (address) {\\n        return _childImplementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function upgradeChildTo(address newChildImplementation) external virtual override onlyOwner {\\n        _setChildImplementation(newChildImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function _setChildImplementation(address newChildImplementation) private {\\n        require(Address.isContract(newChildImplementation), \\\"UpgradeableBeacon: child implementation is not a contract\\\");\\n        _childImplementation = newChildImplementation;\\n        emit Upgraded(newChildImplementation);\\n    }\\n}\",\"keccak256\":\"0x2258f167a87cad73f9a5ce3daf73bf232c3179a79961e903d57468c20343cb16\",\"license\":\"MIT\"},\"src/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n    function upgradeChildTo(address newImplementation) external;\\n}\",\"keccak256\":\"0x2ee2683fe16040709f07a18653117d408b026c5f9eb933b3b6af6d26b617f35c\",\"license\":\"MIT\"},\"src/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n    * @dev Function that is run as the first thing in the fallback function.\\n    * Can be redefined in derived contracts to add functionality.\\n    * Redefinitions must call super._willFallback().\\n    */\\n    function _willFallback() internal virtual {\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\",\"keccak256\":\"0xe39547f99ea306cdbea6d184b91c94a4da952605da3ee9175aa27075fee6032e\",\"license\":\"MIT\"},\"src/contracts/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x6ffb3595113d54827e8eca1b15cf843744a8d5865bb591ba974a7d978b9ea571\",\"license\":\"MIT\"},\"src/test/utils/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xb9053f2733eb2b50ebefca8c8dedc62454aaf8ef84dcbc2a3f08f0bf86694ebe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614275806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001925760003560e01c8063715018a611620000f0578063d451bd1d11620000a3578063e8eb87bd116200007a578063e8eb87bd1462000351578063ed5ec648146200035b578063efdcd9741462000372578063f2fde38b146200038957600080fd5b8063d451bd1d1462000316578063d609a54c146200032b578063da525716146200033f57600080fd5b8063715018a614620002ae5780638456cb5914620002b85780638da5cb5b14620002c25780638fa82de114620002d4578063a104466f14620002eb578063b3f00674146200030257600080fd5b806332a69330116200014957806332a69330146200024a5780633e3ee5a214620002615780633f4ba83a146200026b578063401efc19146200027557806353384ff6146200028c5780635c975abb146200029657600080fd5b80630ea90a12146200019757806310d25c5114620001b45780631cd6dab114620001cd5780631e25aa8c14620001e45780631f1713fc14620001ee5780633154782f1462000205575b600080fd5b620001a1609b5481565b6040519081526020015b60405180910390f35b620001cb620001c53660046200106f565b620003a0565b005b620001cb620001de366004620010a5565b6200041d565b620001a1609c5481565b620001cb620001ff3660046200106f565b620004ba565b62000231620002163660046200106f565b6098602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001620001ab565b620001cb6200025b366004620010c5565b620004f5565b620001a1609d5481565b620001cb62000587565b620001cb62000286366004620010c5565b620005c0565b620001a16103e881565b60655460ff165b6040519015158152602001620001ab565b620001cb62000652565b620001cb6200068b565b6033546001600160a01b031662000231565b62000231620002e5366004620010df565b620006c2565b620001cb620002fc3660046200106f565b62000948565b609a5462000231906001600160a01b031681565b609a546200029d90600160a01b900460ff1681565b60995462000231906001600160a01b031681565b6097546001600160a01b031662000231565b620001cb620009de565b620001cb6200036c366004620010c5565b62000abd565b620001cb620003833660046200106f565b62000b4f565b620001cb6200039a3660046200106f565b62000c0d565b6000620003ae600162000cac565b90508015620003c7576000805461ff0019166101001790555b620003d28262000d3c565b801562000419576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6033546001600160a01b03163314620004535760405162461bcd60e51b81526004016200044a9062001142565b60405180910390fd5b609a5460408051600160a01b90920460ff161515825282151560208301527f061726d7014cedab859c85272e29d6cdc6e46de64d8eb0f85dac0d741f7532f7910160405180910390a1609a8054911515600160a01b0260ff60a01b19909216919091179055565b6033546001600160a01b03163314620004e75760405162461bcd60e51b81526004016200044a9062001142565b620004f28162000d3c565b50565b6033546001600160a01b03163314620005225760405162461bcd60e51b81526004016200044a9062001142565b6103e8811115620005465760405163cd4e616760e01b815260040160405180910390fd5b609b5460408051918252602082018390527f6cc13fbc24770524febbf53335bfc5c276fbb6e63c362425817f3d9014e28ead910160405180910390a1609b55565b6033546001600160a01b03163314620005b45760405162461bcd60e51b81526004016200044a9062001142565b620005be62000e05565b565b6033546001600160a01b03163314620005ed5760405162461bcd60e51b81526004016200044a9062001142565b80609d5411156200061157604051637616640160e01b815260040160405180910390fd5b609c5460408051918252602082018390527f143b8bba8449a9522f7624949217c17ba7f8c9aaf8a893f3365ddee7957e34b4910160405180910390a1609c55565b6033546001600160a01b031633146200067f5760405162461bcd60e51b81526004016200044a9062001142565b620005be600062000e9a565b6033546001600160a01b03163314620006b85760405162461bcd60e51b81526004016200044a9062001142565b620005be62000eec565b6000620006d160655460ff1690565b15620007135760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016200044a565b604080513360248201526001600160a01b0389166044820152606481018890526084810187905260a4810186905260c4810185905283151560e4808301919091528251808303909101815261010490910182526020810180516001600160e01b0316639bf8dbb560e01b17905290516000903090839062000794906200103d565b620007a192919062001177565b604051809103906000f080158015620007be573d6000803e3d6000fd5b506001600160a01b038a81166000818152609860205260409081902080546001600160a01b0319169385169390931790925590516370a0823160e01b8152336004820181905292935090916323b872dd91849084906370a0823190602401602060405180830381865afa1580156200083a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008609190620011df565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015620008b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008db9190620011f9565b5060408051898152602081018990529081018790526060810186905284151560808201526001600160a01b03808b1691908316907f1bb72b46985d7a3abad1d345d856e8576c1d4842b34a5373f3533a4c729703529060a00160405180910390a398975050505050505050565b6033546001600160a01b03163314620009755760405162461bcd60e51b81526004016200044a9062001142565b609954604080516001600160a01b03928316815291831660208301527fb64f850d07871ceb0fd0b59f3ca27dd860676cc26f59a4039b8e9f0b268e7ae8910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b6000620009ec600162000cac565b9050801562000a05576000805461ff0019166101001790555b62000a0f62000f6a565b62000a1962000f9e565b62000a4f60405162000a2b906200104b565b604051809103906000f08015801562000a48573d6000803e3d6000fd5b50620003a0565b609a80546001600160a01b0319163317905560c8609b556276a700609c5562015180609d558015620004f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6033546001600160a01b0316331462000aea5760405162461bcd60e51b81526004016200044a9062001142565b609c5481111562000b0e57604051637616640160e01b815260040160405180910390fd5b609d5460408051918252602082018390527f01ea62fcba6f97563c2899e4e9fe2b7640cb133b77e839d4bed7884431c9294b910160405180910390a1609d55565b6033546001600160a01b0316331462000b7c5760405162461bcd60e51b81526004016200044a9062001142565b6001600160a01b03811662000ba45760405163d92e233d60e01b815260040160405180910390fd5b609a54604080516001600160a01b03928316815291831660208301527fa92ff4390fe6943f0b30e8fe715dde86f85ab79b2b2c640a10fc094cc4036cc8910160405180910390a1609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331462000c3a5760405162461bcd60e51b81526004016200044a9062001142565b6001600160a01b03811662000ca15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200044a565b620004f28162000e9a565b60008054610100900460ff161562000cf8578160ff16600114801562000cd15750303b155b62000cf05760405162461bcd60e51b81526004016200044a9062001219565b506000919050565b60005460ff80841691161062000d225760405162461bcd60e51b81526004016200044a9062001219565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b0381163b62000dbb5760405162461bcd60e51b815260206004820152603960248201527f5570677261646561626c65426561636f6e3a206368696c6420696d706c656d6560448201527f6e746174696f6e206973206e6f74206120636f6e74726163740000000000000060648201526084016200044a565b609780546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60655460ff1662000e505760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016200044a565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff161562000f345760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016200044a565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000e7d3390565b600054610100900460ff1662000f945760405162461bcd60e51b81526004016200044a9062001267565b620005be62000fd2565b600054610100900460ff1662000fc85760405162461bcd60e51b81526004016200044a9062001267565b620005be62001007565b600054610100900460ff1662000ffc5760405162461bcd60e51b81526004016200044a9062001267565b620005be3362000e9a565b600054610100900460ff16620010315760405162461bcd60e51b81526004016200044a9062001267565b6065805460ff19169055565b6108c680620012b383390190565b6126c78062001b7983390190565b6001600160a01b0381168114620004f257600080fd5b6000602082840312156200108257600080fd5b81356200108f8162001059565b9392505050565b8015158114620004f257600080fd5b600060208284031215620010b857600080fd5b81356200108f8162001096565b600060208284031215620010d857600080fd5b5035919050565b60008060008060008060c08789031215620010f957600080fd5b8635620011068162001059565b95506020870135945060408701359350606087013592506080870135915060a0870135620011348162001096565b809150509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b81811015620011b55785810183015185820160600152820162001197565b81811115620011c8576000606083870101525b50601f01601f191692909201606001949350505050565b600060208284031215620011f257600080fd5b5051919050565b6000602082840312156200120c57600080fd5b81516200108f8162001096565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe60806040526040516108c63803806108c68339810160408190526100229161042a565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516104ea565b600080516020610885833981519152146100695761006961050f565b610073828261007a565b505061058f565b61008d8261022660201b6100291760201c565b6100ec5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610160826001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101519190610525565b61022660201b6100291760201c565b6101d25760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e3565b6000805160206108858339815191528281558151156102215761021f6101f6610235565b836040518060600160405280602181526020016108a5602191396102b360201b6100381760201c565b505b505050565b6001600160a01b03163b151590565b600061024d6000805160206108858339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ae9190610525565b905090565b60606001600160a01b0384163b61031b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e3565b600080856001600160a01b0316856040516103369190610540565b600060405180830381855af49150503d8060008114610371576040519150601f19603f3d011682016040523d82523d6000602084013e610376565b606091505b509092509050610387828286610393565b925050505b9392505050565b606083156103a257508161038c565b8251156103b25782518084602001fd5b8160405162461bcd60e51b81526004016100e3919061055c565b80516001600160a01b03811681146103e357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610419578181015183820152602001610401565b8381111561021f5750506000910152565b6000806040838503121561043d57600080fd5b610446836103cc565b60208401519092506001600160401b038082111561046357600080fd5b818501915085601f83011261047757600080fd5b815181811115610489576104896103e8565b604051601f8201601f19908116603f011681019083821181831017156104b1576104b16103e8565b816040528281528860208487010111156104ca57600080fd5b6104db8360208301602088016103fe565b80955050505050509250929050565b60008282101561050a57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561053757600080fd5b61038c826103cc565b600082516105528184602087016103fe565b9190910192915050565b602081526000825180602084015261057b8160408501602087016103fe565b601f01601f19169190910160400192915050565b6102e78061059e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261011c565b6101ac565b565b6001600160a01b03163b151590565b60606001600160a01b0384163b6100a55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516100c09190610239565b600060405180830381855af49150503d80600081146100fb576040519150601f19603f3d011682016040523d82523d6000602084013e610100565b606091505b50915091506101108282866101d0565b925050505b9392505050565b60006101467fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610255565b905090565b3660008037600080366000845af43d6000803e8080156101cb573d6000f35b3d6000fd5b606083156101df575081610115565b8251156101ef5782518084602001fd5b8160405162461bcd60e51b815260040161009c919061027e565b60005b8381101561022457818101518382015260200161020c565b83811115610233576000848401525b50505050565b6000825161024b818460208701610209565b9190910192915050565b60006020828403121561026757600080fd5b81516001600160a01b038116811461011557600080fd5b602081526000825180602084015261029d816040850160208701610209565b601f01601f1916919091016040019291505056fea2646970667358221220f8229659447c762e7a87e74215956d58f6e585f6775523d0543037f8a20f99c664736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564608060405234801561001057600080fd5b506126a7806100206000396000f3fe6080604052600436106101f95760003560e01c80639bf8dbb51161010d578063ca5c7b91116100a0578063dff136f21161006f578063dff136f21461054f578063e66f53b71461056f578063efbe1c1c1461058f578063f80f5dd5146105a4578063fb81a8b5146105c457600080fd5b8063ca5c7b91146104e1578063d0e30db0146104f7578063d7c2f7b0146104ff578063d936547e1461051f57600080fd5b8063c26c9004116100dc578063c26c900414610469578063c45a01551461047e578063c4ae3168146104b6578063c5c4744c146104cb57600080fd5b80639bf8dbb5146104095780639ea9fc4a14610429578063a035b1fe1461043e578063be9a65551461045457600080fd5b80632e8e282f116101905780636727b0da1161015f5780636727b0da1461039357806378c8cda7146103a85780637f6b8ec7146103c85780638473e55f146103dd5780639106d7ba146103f357600080fd5b80632e8e282f14610330578063355274ea1461034657806348cd4cb11461035c5780635c975abb1461037257600080fd5b806312fa6feb116101cc57806312fa6feb146102855780631959a002146102a65780631f2698ab146102ef57806322bb5cf01461031057600080fd5b806309d6e8b0146101fe5780630df7a9aa146102345780630fb5a6b41461025857806312424e3f1461026e575b600080fd5b34801561020a57600080fd5b5060055461021f90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561024057600080fd5b5061024a600c5481565b60405190815260200161022b565b34801561026457600080fd5b5061024a60085481565b34801561027a57600080fd5b506102836105e4565b005b34801561029157600080fd5b5060055461021f90600160b01b900460ff1681565b3480156102b257600080fd5b506102da6102c1366004612298565b6001602081905260009182526040909120805491015482565b6040805192835260208301919091520161022b565b3480156102fb57600080fd5b5060055461021f90600160a81b900460ff1681565b34801561031c57600080fd5b5061024a61032b366004612298565b610793565b34801561033c57600080fd5b5061024a600a5481565b34801561035257600080fd5b5061024a60075481565b34801561036857600080fd5b5061024a600d5481565b34801561037e57600080fd5b5060055461021f90600160b81b900460ff1681565b34801561039f57600080fd5b5061021f6107da565b3480156103b457600080fd5b506102836103c3366004612298565b6107e9565b3480156103d457600080fd5b5061028361085f565b3480156103e957600080fd5b5061024a60065481565b3480156103ff57600080fd5b5061024a600f5481565b34801561041557600080fd5b506102836104243660046122c3565b610975565b34801561043557600080fd5b50610283610fce565b34801561044a57600080fd5b5061024a600b5481565b34801561046057600080fd5b506102836112c8565b34801561047557600080fd5b5061028361153b565b34801561048a57600080fd5b5060035461049e906001600160a01b031681565b6040516001600160a01b03909116815260200161022b565b3480156104c257600080fd5b5061021f611715565b3480156104d757600080fd5b5061024a600e5481565b3480156104ed57600080fd5b5061024a60095481565b61028361188c565b34801561050b57600080fd5b5061028361051a366004612335565b611c91565b34801561052b57600080fd5b5061021f61053a366004612298565b60026020526000908152604090205460ff1681565b34801561055b57600080fd5b5061028361056a366004612298565b611d71565b34801561057b57600080fd5b5060055461049e906001600160a01b031681565b34801561059b57600080fd5b50610283611e62565b3480156105b057600080fd5b506102836105bf366004612298565b61207a565b3480156105d057600080fd5b5060045461049e906001600160a01b031681565b6005546001600160a01b0316331461060f576040516356b381a560e01b815260040160405180910390fd5b60035460408051633582695360e21b815290516000926001600160a01b03169163d609a54c9160048083019260209291908290030181865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d91906123aa565b90506001600160a01b0381166106a65760405163d92e233d60e01b815260040160405180910390fd5b60048054604080516318160ddd60e01b815290516001600160a01b0390921692839263095ea7b392869285926318160ddd92808301926020929182900301816000875af11580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f91906123c7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e91906123e0565b505050565b6001600160a01b0381166000908152600160208181526040808420815180830190925280548083529301549181019190915260075490916107d391612413565b9392505050565b60006107e46120f3565b905090565b6005546001600160a01b03163314610814576040516356b381a560e01b815260040160405180910390fd5b600554600160a01b900460ff1661083e5760405163787fa53160e01b815260040160405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19169055565b600854600d5461086f919061242a565b4311801561087e575060085415155b80156108945750600554600160b01b900460ff16155b156108a1576108a1611e62565b6005546001600160a01b031633146108cc576040516356b381a560e01b815260040160405180910390fd5b600554600160b01b900460ff166108f65760405163f1d2165f60e01b815260040160405180910390fd5b600c54600003610919576040516371cd57f760e11b815260040160405180910390fd5b600c8054600090915561092c3382612161565b600454604080516001600160a01b039092168252602082018390527f398eec65078415b3f15ccb9e37049f5762827d5bf71db8302dd77c595a11155d910160405180910390a150565b600061098160016121ef565b90508015610999576000805461ff0019166101001790555b6001600160a01b0388166109c05760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0387166109e75760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b03898116600483015288916000918316906370a08231906024016020604051808303816000875af1158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5891906123c7565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac091906123c7565b6040516301ffc9a760e01b8152632db6e07160e21b600482015290915033906001600160a01b038c16906301ffc9a790602401602060405180830381865afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3491906123e0565b15610c655781831015610b5a576040516374d9e0b960e01b815260040160405180910390fd5b8a6001600160a01b031663e6fd29826040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe91906123c7565b846001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190612442565b610c2d90600a61254b565b610c37848c61255a565b610c419190612579565b1115610c605760405163fb33f9b560e01b815260040160405180910390fd5b610c99565b811580610c7b5750610c78600283612579565b83105b15610c99576040516374d9e0b960e01b815260040160405180910390fd5b891580610ca55750828a115b15610cc35760405163376278f160e01b815260040160405180910390fd5b871580610ccf57508188115b15610ced5760405163195bab4d60e31b815260040160405180910390fd5b8615801590610dc65750806001600160a01b0316633e3ee5a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5991906123c7565b871080610dc65750806001600160a01b0316631e25aa8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc391906123c7565b87115b15610de457604051637616640160e01b815260040160405180910390fd5b80600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508960068190555088600b819055508760078190555085600560146101000a81548160ff0219169083151502179055508660088190555083600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000336001600160a01b031663d609a54c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef391906123aa565b90506001600160a01b03811615610f795760405163095ea7b360e01b81526001600160a01b0382811660048301526024820185905286169063095ea7b3906044016020604051808303816000875af1158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7791906123e0565b505b50505050508015610fc4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600854600d54610fde919061242a565b43118015610fed575060085415155b80156110035750600554600160b01b900460ff16155b1561101057611010611e62565b6005546001600160a01b0316331461103b576040516356b381a560e01b815260040160405180910390fd5b600554600160b01b900460ff166110655760405163f1d2165f60e01b815260040160405180910390fd5b600480546040516301ffc9a760e01b8152632db6e07160e21b928101929092526001600160a01b03169081906301ffc9a790602401602060405180830381865afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db91906123e0565b801561115c57506002816001600160a01b0316637fb450996040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906125b1565b60038111156111595761115961259b565b14155b801561116b575061116b6120f3565b1561118957604051630c01c97360e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a08231906024016020604051808303816000875af11580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f691906123c7565b9050806009600082825461120a9190612413565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561125c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128091906123e0565b50604080516001600160a01b0384168152602081018390527f5b4b9baea57a11b7abb1e9c49f01847dd34ce20e041b4e5d5f41f358fb130f1a91015b60405180910390a15050565b6005546001600160a01b031633146112f3576040516356b381a560e01b815260040160405180910390fd5b600554600160a81b900460ff161561131e5760405163291659fd60e11b815260040160405180910390fd5b600554600160b01b900460ff161561134957604051637ce54feb60e11b815260040160405180910390fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b03169060009082906370a08231906024016020604051808303816000875af1158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd91906123c7565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142591906123c7565b6040516301ffc9a760e01b8152632db6e07160e21b60048201529091506001600160a01b038416906301ffc9a790602401602060405180830381865afa158015611473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149791906123e0565b156114c257808210156114bd576040516374d9e0b960e01b815260040160405180910390fd5b6114f6565b8015806114d857506114d5600282612579565b82105b156114f6576040516374d9e0b960e01b815260040160405180910390fd5b43600d556005805460ff60a81b1916600160a81b1790556040517f912ee23dde46ec889d6748212cce445d667f7041597691dc89e8549ad8bc0acb90600090a1505050565b600360009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b291906123aa565b6001600160a01b0316336001600160a01b0316146115e35760405163b577c1f760e01b815260040160405180910390fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b03169060009082906370a08231906024016020604051808303816000875af1158015611633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165791906123c7565b600060095560055460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925083169063a9059cbb906044016020604051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906123e0565b50604080516001600160a01b0384168152602081018390527fe6a3066a93ee603dcf934b7b47b68770d6b017bc9d965e817606f0bca49e651891016112bc565b6005546000906001600160a01b03163314611743576040516356b381a560e01b815260040160405180910390fd5b600854600d54611753919061242a565b43118015611762575060085415155b80156117785750600554600160b01b900460ff16155b1561178557611785611e62565b600554600160a81b900460ff166117af5760405163e74d0e3360e01b815260040160405180910390fd5b600554600160b01b900460ff16156117da57604051637ce54feb60e11b815260040160405180910390fd5b600554600160b81b900460ff161561182157600a546117f99043612413565b6008600082825461180a919061242a565b90915550506005805460ff60b81b19169055611839565b43600a556005805460ff60b81b1916600160b81b1790555b600554604051600160b81b90910460ff16151581527fda88b5dfaac55549d4ddddd43a09d4b911233df354952ebc9ac2041aa18534369060200160405180910390a150600554600160b81b900460ff1690565b600554600160b81b900460ff16156118b75760405163ab35696f60e01b815260040160405180910390fd5b600854600d546118c7919061242a565b431180156118d6575060085415155b80156118ec5750600554600160b01b900460ff16155b156118f9576118f9611e62565b600554600160a81b900460ff166119235760405163e74d0e3360e01b815260040160405180910390fd5b600554600160b01b900460ff161561194e57604051637ce54feb60e11b815260040160405180910390fd5b600554600160a01b900460ff1615611990573360009081526002602052604090205460ff1661199057604051630b094f2760e31b815260040160405180910390fd5b33600090815260016020908152604080832060048054600b54845163313ce56760e01b8152945193966001600160a01b039092169591949093869363313ce567938382019390929190829003018188875af11580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190612442565b611a2290600a61254b565b611a2c903461255a565b611a369190612579565b9050600754818460000154611a4b919061242a565b1115611a6a5760405163b92612ed60e01b815260040160405180910390fd5b80600f6000828254611a7c919061242a565b909155505060035460408051632cfc019d60e21b815290516001600160a01b0390921691600091839163b3f00674916004808201926020929091908290030181865afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af491906123aa565b90506000826001600160a01b0316630ea90a126040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a91906123c7565b90506000612710611b6b348461255a565b611b759190612579565b90506000611b838234612413565b905085886000016000828254611b99919061242a565b9250508190555034600e6000828254611bb2919061242a565b9250508190555080600c6000828254611bcb919061242a565b909155505060405163a9059cbb60e01b8152336004820152602481018790526001600160a01b0388169063a9059cbb906044016020604051808303816000875af1158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4191906123e0565b50611c4c8483612161565b604080513481526020810188905233917f71758c75945455cd578bd8afa60a5794ef93f635b87f3b4439f97ca9cafc7318910160405180910390a25050505050505050565b6005546001600160a01b03163314611cbc576040516356b381a560e01b815260040160405180910390fd5b600554600160a01b900460ff16611ce65760405163787fa53160e01b815260040160405180910390fd5b61014d811115611d09576040516368844d6d60e11b815260040160405180910390fd5b60005b8181101561078e57600160026000858585818110611d2c57611d2c6125d2565b9050602002016020810190611d419190612298565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101611d0c565b600360009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de891906123aa565b6001600160a01b0316336001600160a01b031614611e195760405163b577c1f760e01b815260040160405180910390fd5b6001600160a01b038116611e405760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611e8d576040516356b381a560e01b815260040160405180910390fd5b600554600160b81b900460ff1615611eb85760405163ab35696f60e01b815260040160405180910390fd5b600554600160a81b900460ff16611ee25760405163e74d0e3360e01b815260040160405180910390fd5b600854600d54611ef2919061242a565b43111580611f815750600360009054906101000a90046001600160a01b03166001600160a01b0316633e3ee5a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7291906123c7565b600d54611f7f9043612413565b105b15611f9f576040516325cec3a560e01b815260040160405180910390fd5b600554600160b01b900460ff1615611fca57604051637ce54feb60e11b815260040160405180910390fd5b6005805460ff60b01b1916600160b01b179055600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a08231906024016020604051808303816000875af1158015612028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204c91906123c7565b6009556040517f0bd8a3eb532e5fbcd3f5b00335f0fb42fdc11969e9af0fab7c9e71a36ae0d31a90600090a1565b6005546001600160a01b031633146120a5576040516356b381a560e01b815260040160405180910390fd5b600554600160a01b900460ff166120cf5760405163787fa53160e01b815260040160405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6003546040805163d451bd1d60e01b815290516000926001600160a01b03169163d451bd1d9160048083019260209291908290030181865afa15801561213d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e491906123e0565b604080516000808252602082019092526001600160a01b03841690839060405161218b91906125e8565b60006040518083038185875af1925050503d80600081146121c8576040519150601f19603f3d011682016040523d82523d6000602084013e6121cd565b606091505b505090508061078e57604051632b96f51360e01b815260040160405180910390fd5b60008054610100900460ff161561223f578160ff1660011480156122125750303b155b6122375760405162461bcd60e51b815260040161222e90612623565b60405180910390fd5b506000919050565b60005460ff8084169116106122665760405162461bcd60e51b815260040161222e90612623565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b038116811461229557600080fd5b50565b6000602082840312156122aa57600080fd5b81356107d381612280565b801515811461229557600080fd5b600080600080600080600060e0888a0312156122de57600080fd5b87356122e981612280565b965060208801356122f981612280565b955060408801359450606088013593506080880135925060a0880135915060c0880135612325816122b5565b8091505092959891949750929550565b6000806020838503121561234857600080fd5b823567ffffffffffffffff8082111561236057600080fd5b818501915085601f83011261237457600080fd5b81358181111561238357600080fd5b8660208260051b850101111561239857600080fd5b60209290920196919550909350505050565b6000602082840312156123bc57600080fd5b81516107d381612280565b6000602082840312156123d957600080fd5b5051919050565b6000602082840312156123f257600080fd5b81516107d3816122b5565b634e487b7160e01b600052601160045260246000fd5b600082821015612425576124256123fd565b500390565b6000821982111561243d5761243d6123fd565b500190565b60006020828403121561245457600080fd5b815160ff811681146107d357600080fd5b600181815b808511156124a0578160001904821115612486576124866123fd565b8085161561249357918102915b93841c939080029061246a565b509250929050565b6000826124b757506001612545565b816124c457506000612545565b81600181146124da57600281146124e457612500565b6001915050612545565b60ff8411156124f5576124f56123fd565b50506001821b612545565b5060208310610133831016604e8410600b8410161715612523575081810a612545565b61252d8383612465565b8060001904821115612541576125416123fd565b0290505b92915050565b60006107d360ff8416836124a8565b6000816000190483118215151615612574576125746123fd565b500290565b60008261259657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156125c357600080fd5b8151600481106107d357600080fd5b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561260957602081860181015185830152016125ef565b81811115612618576000828501525b509190910192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212204a79e67ed6ffe8661bcaed958672ec821260ac6d77e113dc82d912c70841145664736f6c634300080d0033a264697066735822122010d0595bbdabfcbdcd14e3f13d34fed8fc3c0d148af586f6559221826e9d7b2f64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "childImplementation()": {
        "details": "Returns the current child implementation address."
      },
      "create(address,uint256,uint256,uint256,uint256,bool)": {
        "params": {
          "_allowWhitelisting": "if IFO should be governed by whitelists",
          "_amountForSale": "the amount of FNFT for sale in IFO",
          "_cap": "the maximum amount an account can buy",
          "_fnft": "the ERC20 token address of the FNFT",
          "_price": "the price of each FNFT token"
        },
        "returns": {
          "_0": "IFO address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeChildTo(address)": {
        "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_GOV_FEE()": {
        "notice": "10% fee is max"
      },
      "create(address,uint256,uint256,uint256,uint256,bool)": {
        "notice": "the function to create an IFO"
      },
      "creatorIFOLock()": {
        "notice": "the boolean whether creator should have access to the creator's FNFT shares after IFO"
      },
      "feeReceiver()": {
        "notice": "the address who receives ifo fees"
      },
      "ifos(address)": {
        "notice": "the mapping of FNFT to IFO address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 277,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2270,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 430,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 519,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26709,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "_childImplementation",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 15597,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "ifos",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 15600,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "creatorUtilityContract",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 15604,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "154",
        "type": "t_address_payable"
      },
      {
        "astId": 15608,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "creatorIFOLock",
        "offset": 20,
        "slot": "154",
        "type": "t_bool"
      },
      {
        "astId": 15611,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "governanceFee",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 15614,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "maximumDuration",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 15617,
        "contract": "src/contracts/IFOFactory.sol:IFOFactory",
        "label": "minimumDuration",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}